import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
import * as i0 from "@angular/core";
const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
export class PoButtonGroupBaseComponent {
    constructor() {
        /** Lista de botões. */
        this.buttons = [];
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
    }
    /**
     * @optional
     *
     * @description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value) {
        this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    get toggle() {
        return this._toggle;
    }
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((button, index) => (button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    deselectAllButtons() {
        this.buttons.forEach(button => (button.selected = false));
    }
}
PoButtonGroupBaseComponent.ɵfac = function PoButtonGroupBaseComponent_Factory(t) { return new (t || PoButtonGroupBaseComponent)(); };
PoButtonGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonGroupBaseComponent, inputs: { buttons: ["p-buttons", "buttons"], small: ["p-small", "small"], toggle: ["p-toggle", "toggle"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupBaseComponent, [{
        type: Directive
    }], null, { buttons: [{
            type: Input,
            args: ['p-buttons']
        }], small: [{
            type: Input,
            args: ['p-small']
        }], toggle: [{
            type: Input,
            args: ['p-toggle']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWJ1dHRvbi1ncm91cC9wby1idXR0b24tZ3JvdXAtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBRXBFLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDO0FBRXRDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFFSCxNQUFNLE9BQU8sMEJBQTBCO0lBRHZDO1FBRUUsdUJBQXVCO1FBQ0gsWUFBTyxHQUE2QixFQUFFLENBQUM7UUFFbkQsV0FBTSxHQUFhLEtBQUssQ0FBQztRQUN6QixZQUFPLEdBQVksc0JBQXNCLENBQUM7S0FnRW5EO0lBOURDOzs7Ozs7OztPQVFHO0lBQ0gsSUFBc0IsS0FBSyxDQUFDLEtBQWM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBUSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxJQUF1QixNQUFNLENBQUMsS0FBYTtRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFTLE1BQU8sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFFMUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsYUFBYSxDQUFDLGFBQWdDLEVBQUUsV0FBbUI7UUFDakUsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDbEIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDL0YsQ0FBQztTQUNIO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG1CQUFtQixDQUFDLFFBQVEsRUFBRTtZQUN2RCxhQUFhLENBQUMsUUFBUSxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztTQUNsRDtJQUNILENBQUM7SUFFTyxjQUFjLENBQUMsVUFBa0I7UUFDdkMsSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsSUFBSSxFQUFFO1lBQzNDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQzNCO2FBQU0sSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsTUFBTSxFQUFFO1lBQ3BELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNyRixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7O29HQXBFVSwwQkFBMEI7NkVBQTFCLDBCQUEwQjt1RkFBMUIsMEJBQTBCO2NBRHRDLFNBQVM7Z0JBR1ksT0FBTztrQkFBMUIsS0FBSzttQkFBQyxXQUFXO1lBY0ksS0FBSztrQkFBMUIsS0FBSzttQkFBQyxTQUFTO1lBbUJPLE1BQU07a0JBQTVCLEtBQUs7bUJBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuL3BvLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwVG9nZ2xlIH0gZnJvbSAnLi9wby1idXR0b24tZ3JvdXAtdG9nZ2xlLmVudW0nO1xuXG5jb25zdCBQT19UT0dHTEVfVFlQRV9ERUZBVUxUID0gJ25vbmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tYnV0dG9uLWdyb3VwYCDDqSBmb3JtYWRvIHBvciB1bSBjb25qdW50byBkZSBib3TDtWVzIGRpc3RyaWJ1w61kb3MgaG9yaXpvbnRhbG1lbnRlLlxuICogQ2FkYSBib3TDo28gZG8gZ3J1cG8gw6kgdHJhdGFkbyBkZSBmb3JtYSBpbmRpdmlkdWFsLCByZWNlYmVuZG8gYXNzaW0gdW0gcsOzdHVsbywgdW1hIGHDp8OjbyBiZW0gY29tbyBzZSBkZXZlcsOhIGVzdGFyIGhhYmlsaXRhZG8gb3UgbsOjby5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgYWzDqW0gZGUgc2VydmlyIGNvbW8gdW0gYWdydXBhZG9yIGRlIGJvdMO1ZXMgcGFyYSBhw6fDo28sIHRhbWLDqW0gcGVybWl0ZSBxdWUgc2VqYW0gdXRpbGl6YWRvc1xuICogcGFyYSBzZWxlw6fDtWVzIG11bHRpcGxhcyBlIMO6bmljYXMuXG4gKlxuICogTyBncnVwbyBkZSBib3TDtWVzIGRldmUgc2VyIHV0aWxpemFkbyBwYXJhIG9yZ2FuaXphciBhcyBhw6fDtWVzIGRlIG1hbmVpcmEgdW5pZm9ybWUgZSB0cmFuc21pdGlyIGEgaWRlaWEgZGUgcXVlIG9zIGJvdMO1ZXMgZmF6ZW1cbiAqIHBhcnRlIGRlIHVtIG1lc21vIGNvbnRleHRvLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXNcbiAqXG4gKiAtIEV2aXRlIHVzYXIgbyBgcG8tYnV0dG9uLWdyb3VwYCBjb20gYXBlbmFzIDEgYcOnw6NvLCBwYXJhIGlzc28gdXRpbGl6ZSBvIGBwby1idXR0b25gLlxuICogLSBQcm9jdXJlIHV0aWxpemFyIG5vIG3DoXhpbW8gMyBhw6fDtWVzIHBhcmEgY2FkYSBgcG8tYnV0dG9uLWdyb3VwYC5cbiAqXG4gKiA+IEFzIHJlY29tZW5kYcOnw7VlcyBkbyBgcG8tYnV0dG9uYCB0YW1iw6ltIHZhbGVtIHBhcmEgbyBgcG8tYnV0dG9uLWdyb3VwYC5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9CdXR0b25Hcm91cEJhc2VDb21wb25lbnQge1xuICAvKiogTGlzdGEgZGUgYm90w7Vlcy4gKi9cbiAgQElucHV0KCdwLWJ1dHRvbnMnKSBidXR0b25zOiBBcnJheTxQb0J1dHRvbkdyb3VwSXRlbT4gPSBbXTtcblxuICBwcml2YXRlIF9zbWFsbD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdG9nZ2xlPzogc3RyaW5nID0gUE9fVE9HR0xFX1RZUEVfREVGQVVMVDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLXNtYWxsJykgc2V0IHNtYWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc21hbGwgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzbWFsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBtb2RvIGRlIHNlbGXDp8OjbyBkZSBib3TDtWVzLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYG5vbmVgXG4gICAqL1xuICBASW5wdXQoJ3AtdG9nZ2xlJykgc2V0IHRvZ2dsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9nZ2xlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9CdXR0b25Hcm91cFRvZ2dsZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gICAgdGhpcy5jaGVja1NlbGVjdGVkcyh0aGlzLl90b2dnbGUpO1xuICB9XG5cbiAgZ2V0IHRvZ2dsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b2dnbGU7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKGJ1dHRvbkNsaWNrZWQ6IFBvQnV0dG9uR3JvdXBJdGVtLCBidXR0b25JbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMudG9nZ2xlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goXG4gICAgICAgIChidXR0b24sIGluZGV4KSA9PiAoYnV0dG9uLnNlbGVjdGVkID0gaW5kZXggPT09IGJ1dHRvbkluZGV4ID8gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgOiBmYWxzZSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5NdWx0aXBsZSkge1xuICAgICAgYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZCA9ICFidXR0b25DbGlja2VkLnNlbGVjdGVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tTZWxlY3RlZHModG9nZ2xlTW9kZTogc3RyaW5nKSB7XG4gICAgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuTm9uZSkge1xuICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcbiAgICB9IGVsc2UgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICBjb25zdCBoYXNNb3JlT25lU2VsZWN0ZWQgPSB0aGlzLmJ1dHRvbnMuZmlsdGVyKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQpLmxlbmd0aCA+IDE7XG4gICAgICBpZiAoaGFzTW9yZU9uZVNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnMoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goYnV0dG9uID0+IChidXR0b24uc2VsZWN0ZWQgPSBmYWxzZSkpO1xuICB9XG59XG4iXX0=