import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { InputBoolean } from '../../decorators';
import * as i0 from "@angular/core";
const PO_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
const PO_BUTTON_TYPE_DEFAULT = 'default';
/**
 * @description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
export class PoButtonBaseComponent {
    constructor() {
        /**
         * @deprecated 14.x.x
         *
         * @optional
         *
         * @description
         *
         * **Deprecated 14.x.x**.
         *
         * Aplica foco no elemento ao ser iniciado.
         * > Caso mais de um elemento seja configurado com essa propriedade,
         * o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
        this.click = new EventEmitter();
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe um ícone de carregamento à esquerda do _label_ do botão.
     *
     * > Quando esta propriedade estiver habilitada, desabilitará o botão.
     *
     * @default `false`
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deixa o botão menor.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estilo do `po-button`.
     *
     * Valore válidos:
     *  - `default`: estilo padrão do `po-button`.
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
     *  - `link`: o `po-button` recebe o estilo de um link.
     *
     * @default `default`
     */
    set type(value) {
        this._type = PO_BUTTON_TYPES.includes(value) ? value : PO_BUTTON_TYPE_DEFAULT;
    }
    get type() {
        return this._type;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
PoButtonBaseComponent.ɵfac = function PoButtonBaseComponent_Factory(t) { return new (t || PoButtonBaseComponent)(); };
PoButtonBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], icon: ["p-icon", "icon"], loading: ["p-loading", "loading"], small: ["p-small", "small"], type: ["p-type", "type"], disabled: ["p-disabled", "disabled"] }, outputs: { click: "p-click" } });
__decorate([
    InputBoolean()
], PoButtonBaseComponent.prototype, "autoFocus", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }], small: [{
            type: Input,
            args: ['p-small']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,