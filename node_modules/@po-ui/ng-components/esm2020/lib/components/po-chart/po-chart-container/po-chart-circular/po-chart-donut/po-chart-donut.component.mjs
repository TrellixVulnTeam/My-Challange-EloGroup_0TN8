import { Component } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { PoDefaultColorsTextBlack } from '../../../../../services/po-color/po-colors.constant';
import { PoChartDonutDefaultThickness, PoChartStartAngle } from '../../../helpers/po-chart-default-values.constant';
import { PoChartCircularComponent } from '../po-chart-circular.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../po-chart-circular-path/po-chart-circular-path.component";
import * as i3 from "../po-chart-circular-label/po-chart-circular-label.component";
const _c0 = ["po-chart-donut", ""];
function PoChartDonutComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 2, 3);
    i0.ɵɵlistener("p-on-click", function PoChartDonutComponent__svg_g_1_Template__svg_g_p_on_click_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.onSerieClick($event); })("p-on-hover", function PoChartDonutComponent__svg_g_1_Template__svg_g_p_on_hover_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.onSerieHover($event); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-serie", item_r2);
    i0.ɵɵattribute("key", "po-chart-circular-path-" + i_r3);
} }
function PoChartDonutComponent__svg_g_2__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵelement(1, "g", 4, 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const i_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-serie", item_r9)("p-show-label", ctx_r8.showLabels);
    i0.ɵɵattribute("key", "po-chart-circular-label-" + i_r10);
} }
function PoChartDonutComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g");
    i0.ɵɵtemplate(1, PoChartDonutComponent__svg_g_2__svg_g_1_Template, 3, 3, "g", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r1.seriesLabels);
} }
export class PoChartDonutComponent extends PoChartCircularComponent {
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
        this.poChartBlackColor = '#000000';
        this.poChartWhiteColor = '#ffffff';
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize || changes.options) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
            this.applySeriesLabels(this.seriesList, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const startInnerX = radius + cosAlpha * innerRadius;
        const startInnerY = radius + sinAlpha * innerRadius;
        const endInnerX = radius + cosBeta * innerRadius;
        const endInnerY = radius + sinBeta * innerRadius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        this.verifyDisplayLabels(radius, innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            largeArc ? '1,0' : '0,0',
            startInnerX,
            startInnerY,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = this.getPercentValue(data, this.totalValue) + '%';
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    applySeriesLabels(seriesList, height) {
        let startRadianAngle = PoChartStartAngle;
        let endRadianAngle = PoChartStartAngle;
        this.seriesLabels = seriesList.map(serie => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, this.totalValue);
            const label = this.getPercentValue(serie.data, this.totalValue) + '% ';
            const color = this.getTextColor(serie.color);
            const coordinates = this.calculateLabelCoordinates(height, startRadianAngle, endRadianAngle);
            return { ...coordinates, label, color };
        });
    }
    calculateLabelCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sliceCenterAngle = (startRadianAngle + endRadianAngle) / 2;
        const labelRadius = innerRadius + (radius - innerRadius) / 2;
        const xCoordinate = labelRadius * Math.cos(sliceCenterAngle) + radius;
        const yCoordinate = labelRadius * Math.sin(sliceCenterAngle) + radius;
        return { xCoordinate, yCoordinate };
    }
    getInnerRadius(radius) {
        const defaultInnerRadius = radius - PoChartDonutDefaultThickness;
        return this.innerRadius >= 0 ? (this.innerRadius / 100) * radius : defaultInnerRadius;
    }
    getPercentValue(value, totalValue) {
        const percentValue = (value / totalValue) * 100;
        const floatPercentValue = convertNumberToDecimal(percentValue, 2);
        return String(floatPercentValue).replace('.', ',');
    }
    getTextColor(color) {
        if (PoDefaultColorsTextBlack.includes(color)) {
            return this.poChartBlackColor;
        }
        return this.poChartWhiteColor;
    }
    verifyDisplayLabels(radius, innerRadius) {
        this.canDisplayLabels = radius - innerRadius >= radius - (radius - PoChartDonutDefaultThickness);
    }
}
PoChartDonutComponent.ɵfac = function PoChartDonutComponent_Factory(t) { return new (t || PoChartDonutComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoChartDonutComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartDonutComponent, selectors: [["", "po-chart-donut", ""]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 3, vars: 2, consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], ["po-chart-circular-path", "", 3, "p-serie", "p-on-click", "p-on-hover"], ["svgPaths", ""], ["po-chart-circular-label", "", 3, "p-serie", "p-show-label"], ["svgLabels", ""]], template: function PoChartDonutComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g");
        i0.ɵɵtemplate(1, PoChartDonutComponent__svg_g_1_Template, 3, 2, "g", 0);
        i0.ɵɵtemplate(2, PoChartDonutComponent__svg_g_2_Template, 2, 1, "g", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.seriesList);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.canDisplayLabels);
    } }, directives: [i1.NgForOf, i2.PoChartCircularPathComponent, i1.NgIf, i3.PoChartCircularLabelComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartDonutComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-donut]', template: "<svg:g>\n  <!-- SERIES PATHS -->\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\n    <svg:g #svgPaths po-chart-circular-path\n      [attr.key]=\"'po-chart-circular-path-' + i\"\n      [p-serie]=\"item\"\n      (p-on-click)=\"onSerieClick($event)\"\n      (p-on-hover)=\"onSerieHover($event)\">\n    </svg:g>\n  </svg:g>\n\n  <!-- SERIES LABELS -->\n  <svg:g *ngIf=\"canDisplayLabels\">\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\n      <svg:g #svgLabels po-chart-circular-label\n        [attr.key]=\"'po-chart-circular-label-' + i\"\n        [p-serie]=\"item\"\n        [p-show-label]=\"showLabels\">\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</svg:g>\n\n" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,