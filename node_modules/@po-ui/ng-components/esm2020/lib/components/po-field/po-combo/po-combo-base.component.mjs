import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, isTypeof, validValue } from '../../../utils/util';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
const PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
const PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
const PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
export const poComboLiteralsDefault = {
    en: {
        noData: 'No data found'
    },
    es: {
        noData: 'Datos no encontrados'
    },
    pt: {
        noData: 'Nenhum dado encontrado'
    },
    ru: {
        noData: 'Данные не найдены'
    }
};
/**
 * @description
 *
 * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
 *
 * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
 *
 * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
 * as setas e pressione *Enter* na opção que desejar.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
 *
 * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
 * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
 */
export class PoComboBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, o evento `p-change` receberá como argumento o `PoComboOption` referente à opção selecionada.
         *
         * @default `false`
         */
        this.emitObjectValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, desabilitará a busca de um item via TAB.
         *
         * @default `false`
         */
        this.disabledTabFilter = false;
        /**
         * @optional
         *
         * @description
         *
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel. A função receberá como argumento o model modificado.
         *
         * > Pode-se optar pelo recebimento do objeto selecionado ao invés do model através da propriedade `p-emit-object-value`.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-combo ... [ngModel]="comboModel" (ngModelChange)="comboModel = $event"> </po-combo>
         * ```
         *
         */
        this.ngModelChange = new EventEmitter();
        this.cacheOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.previousSearchValue = '';
        this.visibleOptions = [];
        this.cacheStaticOptions = [];
        this.comboOptionsList = [];
        this.onModelTouched = null;
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = PoComboFilterMode.startsWith;
        this._options = [];
        this._placeholder = '';
        this._required = false;
        this._sort = false;
        // utilizado para fazer o controle de atualizar o model.
        // não deve forçar a atualização se o gatilho for o writeValue para não deixar o campo dirty.
        this.fromWriteValue = false;
        this.language = languageService.getShortLanguage();
    }
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`p-filter-service`).
     *
     * @default `400`
     */
    set debounceTime(value) {
        const parsedValue = parseInt(value, 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
    }
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * @optional
     *
     * @description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * @default `false`
     *
     */
    set disabledInitFilter(value) {
        this._disabledInitFilter = convertToBoolean(value);
    }
    get disabledInitFilter() {
        return this._disabledInitFilter;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * @default `0`
     */
    set filterMinlength(value) {
        const parseValue = typeof value === 'string' ? parseInt(value, 10) : value;
        this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
    }
    get filterMinlength() {
        return this._filterMinlength;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.selectedValue);
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * @default `false`
     */
    set changeOnEnter(changeOnEnter) {
        this._changeOnEnter = convertToBoolean(changeOnEnter);
    }
    get changeOnEnter() {
        return this._changeOnEnter;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel(this.selectedValue);
    }
    get disabled() {
        return this._disabled;
    }
    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
    set sort(sort) {
        this._sort = convertToBoolean(sort);
        this.comboListDefinitions();
    }
    get sort() {
        return this._sort;
    }
    /**
     * Nesta propriedade define a lista de opções do `po-combo`.
     *
     * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.
     * - Utilize `PoComboOption` para lista de opções simples.
     * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.
     *
     * **Importante:**
     * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.
     * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.
     * - Um agrupamento só será exibido se houver pelo menos uma opção válida.
     */
    set options(options) {
        this._options = Array.isArray(options) ? options : [];
        this.comboListDefinitions();
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
     *
     * @default `startsWith`
     */
    set filterMode(filterMode) {
        this._filterMode = filterMode in PoComboFilterMode ? filterMode : PoComboFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoComboFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoComboFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoComboFilterMode.endsWith;
                break;
        }
    }
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
     *
     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
     */
    set filterParams(filterParams) {
        this._filterParams = filterParams || filterParams === 0 || filterParams === false ? filterParams : undefined;
    }
    get filterParams() {
        return this._filterParams;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-combo
     *   [p-literals]="customLiterals">
     * </po-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poComboLiteralsDefault[poLocaleDefault],
                ...poComboLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poComboLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poComboLiteralsDefault[this.language];
    }
    get isOptionGroupList() {
        return this._options.length && this._options[0].hasOwnProperty('options');
    }
    ngOnInit() {
        this.updateComboList();
    }
    onInitService() {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    }
    setService(service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties(service, this.fieldLabel, this.fieldValue);
            }
        }
    }
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoComboFilterMode.contains:
                return this.contains(search, option);
            case PoComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    startsWith(search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    }
    contains(search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    endsWith(search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    }
    getOptionFromValue(value, options) {
        return options ? options.find((option) => this.isEqual(option.value, value)) : null;
    }
    getOptionFromLabel(label, options) {
        if (options) {
            return options.find((option) => option.label.toString().toLowerCase() === label.toString().toLowerCase());
        }
        else {
            return null;
        }
    }
    updateSelectedValue(option, isUpdateModel = true) {
        const optionLabel = (option && option.label) || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            const optionValue = option?.value !== undefined ? option.value : undefined;
            this.updateModel(optionValue);
        }
    }
    callModelChange(value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    searchForLabel(search, options, filterMode) {
        if (search && options && options.length) {
            const newOptions = [];
            let addedOptionsGroupTitle = false;
            let optionsGroupTitle;
            options.forEach(option => {
                if ('options' in option) {
                    addedOptionsGroupTitle = false;
                    return (optionsGroupTitle = option);
                }
                if (option.label && (this.compareMethod(search, option, filterMode) || this.service)) {
                    if (this.isOptionGroupList && !addedOptionsGroupTitle) {
                        newOptions.push(optionsGroupTitle);
                        addedOptionsGroupTitle = true;
                    }
                    newOptions.push(option);
                }
            });
            this.selectedView = newOptions[this.isOptionGroupList ? 1 : 0];
            this.updateComboList(newOptions);
        }
        else {
            this.updateComboList();
        }
    }
    updateComboList(options) {
        const copyOptions = options || [...this.comboOptionsList];
        const newOptions = !options && this.selectedValue ? [{ ...this.selectedOption }] : copyOptions;
        this.visibleOptions = newOptions;
        if (!this.selectedView && this.visibleOptions.length) {
            this.selectedView = copyOptions.find(option => option.value !== undefined);
        }
    }
    getNextOption(value, options, reverse = false) {
        const optionsList = reverse ? options.slice(0).reverse() : options.slice(0);
        let optionFound = null;
        let found = false;
        for (const option of optionsList) {
            if (option.value && !optionFound) {
                optionFound = option;
            }
            if (option.value && found) {
                return option;
            }
            if (this.isEqual(option.value, value)) {
                found = true;
            }
        }
        return optionFound;
    }
    getIndexSelectedView() {
        for (let i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    }
    compareObjects(obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    }
    verifyValidOption() {
        const inputValue = this.getInputValue();
        const optionFound = this.getOptionFromLabel(inputValue, this.comboOptionsList);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        if (optionFound && optionFound.value !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound.label;
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption.label;
            return;
        }
        else if (inputValue && !optionFound) {
            const isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    }
    // Recebe as alterações do model
    writeValue(value) {
        this.fromWriteValue = true;
        if (validValue(value) && !this.service && this.comboOptionsList && this.comboOptionsList.length) {
            const option = this.getOptionFromValue(value, this.comboOptionsList);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        else {
            this.updateSelectedValue(null);
            this.updateComboList();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    clear(value) {
        this.callModelChange(value);
        this.updateSelectedValue(null);
        this.updateComboList();
    }
    configAfterSetFilterService(service) {
        if (service) {
            this.comboOptionsList = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.comboOptionsList = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    }
    unsubscribeKeyupObservable() {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    comboListDefinitions() {
        this.comboOptionsList = this.options.length > 0 ? this.listingComboOptions(this.options) : this.options;
        this.cacheStaticOptions = this.comboOptionsList;
        this.updateComboList();
    }
    compareOptions(optionA, optionB) {
        const labelA = optionA.label.toString().toLowerCase();
        const labelB = optionB.label.toString().toLowerCase();
        return labelA < labelB ? -1 : labelA > labelB ? 1 : 0;
    }
    hasDuplicatedOption(options, currentOption, accumulatedGroupOptions) {
        return (options.some(option => option.label === currentOption) ||
            (accumulatedGroupOptions && accumulatedGroupOptions.some(option => option.label === currentOption)));
    }
    listingComboOptions(comboOptions) {
        const comboOptionsList = comboOptions.concat();
        const verifiedComboOptionsList = this.verifyComboOptions(comboOptionsList);
        this.sortOptions(verifiedComboOptionsList);
        if (this.isOptionGroupList && verifiedComboOptionsList.length > 0) {
            return this.verifyComboOptionsGroup(verifiedComboOptionsList);
        }
        return verifiedComboOptionsList;
    }
    sortOptions(comboOptionsList) {
        if (comboOptionsList.length > 0 && this.sort) {
            return comboOptionsList.sort(this.compareOptions);
        }
    }
    validateValue(currentOption, verifyingOptionsGroup = false) {
        const { label, options, value } = currentOption;
        if (this.isOptionGroupList) {
            return ((validValue(label) && options && options.length > 0) || (verifyingOptionsGroup === true && validValue(value)));
        }
        return validValue(value) && !options;
    }
    verifyComboOptions(comboOptions, verifyingOptionsGroup = false, accumulatedGroupOptions) {
        return comboOptions.reduce((accumulatedOptions, currentOption) => {
            if (!this.verifyIfHasLabel(currentOption) ||
                this.hasDuplicatedOption(accumulatedOptions, currentOption.label, accumulatedGroupOptions) ||
                !this.validateValue(currentOption, verifyingOptionsGroup)) {
                return accumulatedOptions;
            }
            accumulatedOptions.push(currentOption);
            return accumulatedOptions;
        }, []);
    }
    verifyComboOptionsGroup(comboOptionsList) {
        return comboOptionsList.reduce((accumulatedGroupOptions, currentOption) => {
            const { options, label } = currentOption;
            const verifiedComboOptionsGroupList = this.verifyComboOptions(options, true, accumulatedGroupOptions);
            if (verifiedComboOptionsGroupList.length > 0) {
                this.sortOptions(verifiedComboOptionsGroupList);
                accumulatedGroupOptions.push({ label: label, options: true }, ...verifiedComboOptionsGroupList);
            }
            return accumulatedGroupOptions;
        }, []);
    }
    verifyIfHasLabel(currentOption = {}) {
        const { label, options, value } = currentOption;
        if ((this.isOptionGroupList && options && !label) || (!label && !value) || (!this.isOptionGroupList && options)) {
            return false;
        }
        if (!currentOption.label) {
            currentOption.label = currentOption.value.toString();
            return true;
        }
        return true;
    }
    updateInternalVariables(option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    }
    updateModel(value) {
        if (value !== this.selectedValue) {
            if (!this.fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(this.emitObjectValue ? this.selectedOption : value);
        }
        this.selectedValue = value;
        this.fromWriteValue = false;
    }
    updateSelectedValueWithOldOption() {
        const oldOption = this.getOptionFromValue(this.selectedValue, this.comboOptionsList);
        if (oldOption && oldOption.label) {
            return this.updateSelectedValue(oldOption);
        }
    }
}
PoComboBaseComponent.ɵfac = function PoComboBaseComponent_Factory(t) { return new (t || PoComboBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoComboBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoComboBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], help: ["p-help", "help"], name: "name", filterService: ["p-filter-service", "filterService"], icon: ["p-icon", "icon"], optional: ["p-optional", "optional"], clean: ["p-clean", "clean"], emitObjectValue: ["p-emit-object-value", "emitObjectValue"], disabledTabFilter: ["p-disabled-tab-filter", "disabledTabFilter"], placeholder: ["p-placeholder", "placeholder"], debounceTime: ["p-debounce-time", "debounceTime"], disabledInitFilter: ["p-disabled-init-filter", "disabledInitFilter"], fieldValue: ["p-field-value", "fieldValue"], fieldLabel: ["p-field-label", "fieldLabel"], filterMinlength: ["p-filter-minlength", "filterMinlength"], required: ["p-required", "required"], changeOnEnter: ["p-change-on-enter", "changeOnEnter"], disabled: ["p-disabled", "disabled"], sort: ["p-sort", "sort"], options: ["p-options", "options"], filterMode: ["p-filter-mode", "filterMode"], filterParams: ["p-filter-params", "filterParams"], literals: ["p-literals", "literals"] }, outputs: { change: "p-change", ngModelChange: "ngModelChange" } });
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "clean", void 0);
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "emitObjectValue", void 0);
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "disabledTabFilter", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoLanguageService }]; }, { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], name: [{
            type: Input,
            args: ['name']
        }], filterService: [{
            type: Input,
            args: ['p-filter-service']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], clean: [{
            type: Input,
            args: ['p-clean']
        }], emitObjectValue: [{
            type: Input,
            args: ['p-emit-object-value']
        }], disabledTabFilter: [{
            type: Input,
            args: ['p-disabled-tab-filter']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], debounceTime: [{
            type: Input,
            args: ['p-debounce-time']
        }], disabledInitFilter: [{
            type: Input,
            args: ['p-disabled-init-filter']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], filterMinlength: [{
            type: Input,
            args: ['p-filter-minlength']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], changeOnEnter: [{
            type: Input,
            args: ['p-change-on-enter']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], sort: [{
            type: Input,
            args: ['p-sort']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], filterMode: [{
            type: Input,
            args: ['p-filter-mode']
        }], filterParams: [{
            type: Input,
            args: ['p-filter-params']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,