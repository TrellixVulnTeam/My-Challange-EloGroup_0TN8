import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { validateObjectType } from '../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
export class PoComboFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
        this.messages = [];
    }
    get url() {
        return this._url;
    }
    getFilteredData(param, filterParams) {
        const value = param.value;
        const filterParamsValidated = validateObjectType(filterParams);
        const params = { ...filterParamsValidated, filter: value };
        return this.http
            .get(`${this.url}`, { responseType: 'json', params, headers: this.headers })
            .pipe(map((response) => this.parseToArrayComboOption(response.items)));
    }
    getObjectByValue(value, filterParams) {
        const filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(`${this.url}/${value}`, { params: filterParamsValidated, headers: this.headers })
            .pipe(map(item => this.parseToComboOption(item)));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            const parsedOptions = items.map(item => this.parseToComboOption(item));
            this.displayMessages();
            return parsedOptions;
        }
        return [];
    }
    parseToComboOption(item) {
        if (!item?.[this.fieldValue]) {
            this.addMessage(item, this.fieldValue);
            return { value: '' };
        }
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
    addMessage(item, property) {
        this.messages.push(`Cannot read property "${property}" of ${JSON.stringify(item)},
      see [p-field-value] property at https://po-ui.io/documentation/po-combo`);
    }
    displayMessages() {
        if (this.messages.length) {
            this.messages.forEach(message => console.error(message));
            this.messages = [];
        }
    }
}
PoComboFilterService.ɵfac = function PoComboFilterService_Factory(t) { return new (t || PoComboFilterService)(i0.ɵɵinject(i1.HttpClient)); };
PoComboFilterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoComboFilterService, factory: PoComboFilterService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboFilterService, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY29tYm8vcG8tY29tYm8tZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7QUFFekQ7Ozs7OztHQU1HO0FBRUgsTUFBTSxPQUFPLG9CQUFvQjtJQWUvQixZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBZHBDLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFDN0IsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUVwQixZQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDO1lBQzlDLGlCQUFpQixFQUFFLE1BQU07U0FDMUIsQ0FBQyxDQUFDO1FBR0ssYUFBUSxHQUFHLEVBQUUsQ0FBQztJQU1pQixDQUFDO0lBSnhDLElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBSUQsZUFBZSxDQUFDLEtBQVUsRUFBRSxZQUFrQjtRQUM1QyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzFCLE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUUzRCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFD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Z3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFBvQ29tYm9GaWx0ZXIgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tY29tYm8tZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0NvbWJvT3B0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNvbWJvLW9wdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9SZXNwb25zZSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1yZXNwb25zZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgdmFsaWRhdGVPYmplY3RUeXBlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcGFkcsOjbyB1dGlsaXphZG8gcGFyYSBmaWx0cmFyIG9zIGRhZG9zIGRvIGNvbXBvbmVudGUgcG8tY29tYm8uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0NvbWJvRmlsdGVyU2VydmljZSBpbXBsZW1lbnRzIFBvQ29tYm9GaWx0ZXIge1xuICBmaWVsZExhYmVsOiBzdHJpbmcgPSAnbGFiZWwnO1xuICBmaWVsZFZhbHVlOiBzdHJpbmcgPSAndmFsdWUnO1xuXG4gIHJlYWRvbmx5IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAnWC1QTy1Oby1NZXNzYWdlJzogJ3RydWUnXG4gIH0pO1xuXG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuICBwcml2YXRlIG1lc3NhZ2VzID0gW107XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0RmlsdGVyZWREYXRhKHBhcmFtOiBhbnksIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8QXJyYXk8UG9Db21ib09wdGlvbj4+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtLnZhbHVlO1xuICAgIGNvbnN0IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCA9IHZhbGlkYXRlT2JqZWN0VHlwZShmaWx0ZXJQYXJhbXMpO1xuXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5maWx0ZXJQYXJhbXNWYWxpZGF0ZWQsIGZpbHRlcjogdmFsdWUgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQoYCR7dGhpcy51cmx9YCwgeyByZXNwb25zZVR5cGU6ICdqc29uJywgcGFyYW1zLCBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSlcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IFBvUmVzcG9uc2UpID0+IHRoaXMucGFyc2VUb0FycmF5Q29tYm9PcHRpb24ocmVzcG9uc2UuaXRlbXMpKSk7XG4gIH1cblxuICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8UG9Db21ib09wdGlvbj4ge1xuICAgIGNvbnN0IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCA9IHZhbGlkYXRlT2JqZWN0VHlwZShmaWx0ZXJQYXJhbXMpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gLCB7IHBhcmFtczogZmlsdGVyUGFyYW1zVmFsaWRhdGVkLCBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSlcbiAgICAgIC5waXBlKG1hcChpdGVtID0+IHRoaXMucGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW0pKSk7XG4gIH1cblxuICBjb25maWdQcm9wZXJ0aWVzKHVybDogc3RyaW5nLCBmaWVsZExhYmVsOiBzdHJpbmcsIGZpZWxkVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLmZpZWxkTGFiZWwgPSBmaWVsZExhYmVsO1xuICAgIHRoaXMuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9BcnJheUNvbWJvT3B0aW9uKGl0ZW1zOiBBcnJheTxhbnk+KTogQXJyYXk8UG9Db21ib09wdGlvbj4ge1xuICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBwYXJzZWRPcHRpb25zID0gaXRlbXMubWFwKGl0ZW0gPT4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSkpO1xuXG4gICAgICB0aGlzLmRpc3BsYXlNZXNzYWdlcygpO1xuXG4gICAgICByZXR1cm4gcGFyc2VkT3B0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9Db21ib09wdGlvbihpdGVtOiBhbnkpOiBQb0NvbWJvT3B0aW9uIHtcbiAgICBpZiAoIWl0ZW0/Llt0aGlzLmZpZWxkVmFsdWVdKSB7XG4gICAgICB0aGlzLmFkZE1lc3NhZ2UoaXRlbSwgdGhpcy5maWVsZFZhbHVlKTtcblxuICAgICAgcmV0dXJuIHsgdmFsdWU6ICcnIH07XG4gICAgfVxuXG4gICAgY29uc3QgbGFiZWwgPSBpdGVtW3RoaXMuZmllbGRMYWJlbF07XG4gICAgY29uc3QgdmFsdWUgPSBpdGVtW3RoaXMuZmllbGRWYWx1ZV07XG5cbiAgICByZXR1cm4geyBsYWJlbCwgdmFsdWUgfTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkTWVzc2FnZShpdGVtLCBwcm9wZXJ0eTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKGBDYW5ub3QgcmVhZCBwcm9wZXJ0eSBcIiR7cHJvcGVydHl9XCIgb2YgJHtKU09OLnN0cmluZ2lmeShpdGVtKX0sXG4gICAgICBzZWUgW3AtZmllbGQtdmFsdWVdIHByb3BlcnR5IGF0IGh0dHBzOi8vcG8tdWkuaW8vZG9jdW1lbnRhdGlvbi9wby1jb21ib2ApO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwbGF5TWVzc2FnZXMoKSB7XG4gICAgaWYgKHRoaXMubWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLmZvckVhY2gobWVzc2FnZSA9PiBjb25zb2xlLmVycm9yKG1lc3NhZ2UpKTtcblxuICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIH1cbiAgfVxufVxuIl19