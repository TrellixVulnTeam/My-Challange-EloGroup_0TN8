import { Injectable, EventEmitter } from '@angular/core';
import { PoLookupModalComponent } from '../po-lookup-modal/po-lookup-modal.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/po-component-injector/po-component-injector.service";
/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
export class PoLookupModalService {
    constructor(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.selectValueEvent = new EventEmitter();
        this.componentRef = null;
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param advancedFilters {Array<PoDynamicFormField>} Objeto utilizado para criar o busca avançada.
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     * @param selectedItems {any} Valor que está selecionado que será repassado para o modal para apresentar na tabela.
     * @param fieldLabel {string} Valor que será utilizado como descrição do campo.
     * @param fieldValue {string} Valor que será utilizado como valor do campo.
     */
    openModal(params) {
        const { advancedFilters, service, columns, filterParams, title, literals, infiniteScroll, multiple, selectedItems, fieldLabel, fieldValue } = params;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.advancedFilters = advancedFilters;
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe($event => {
            this.selectValue($event);
        });
        this.componentRef.instance.infiniteScroll = infiniteScroll;
        this.componentRef.instance.multiple = multiple;
        this.componentRef.instance.selectedItems = selectedItems;
        this.componentRef.instance.fieldLabel = fieldLabel;
        this.componentRef.instance.fieldValue = fieldValue;
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    }
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    selectValue(value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    }
}
PoLookupModalService.ɵfac = function PoLookupModalService_Factory(t) { return new (t || PoLookupModalService)(i0.ɵɵinject(i1.PoComponentInjectorService)); };
PoLookupModalService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLookupModalService, factory: PoLookupModalService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalService, [{
        type: Injectable
    }], function () { return [{ type: i1.PoComponentInjectorService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL3NlcnZpY2VzL3BvLWxvb2t1cC1tb2RhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU92RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7O0FBRXRGOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0lBSy9CLFlBQW9CLG1CQUErQztRQUEvQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTRCO1FBSm5FLHFCQUFnQixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXRELGlCQUFZLEdBQXNCLElBQUksQ0FBQztJQUV1QixDQUFDO0lBRXZFOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILFNBQVMsQ0FBQyxNQVlUO1FBQ0MsTUFBTSxFQUNKLGVBQWUsRUFDZixPQUFPLEVBQ1AsT0FBTyxFQUNQLFlBQVksRUFDWixLQUFLLEVBQ0wsUUFBUSxFQUNSLGNBQWMsRUFDZCxRQUFRLEVBQ1IsYUFBYSxFQUNiLFVBQVUsRUFDVixVQUFVLEVBQ1gsR0FBRyxNQUFNLENBQUM7UUFFWCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDN0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUN2RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ3pELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUNuRCxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxzRUFBc0U7SUFDdEUsV0FBVyxDQUFDLEtBQUs7UUFDZixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLENBQUM7O3dGQXhFVSxvQkFBb0I7MEVBQXBCLG9CQUFvQixXQUFwQixvQkFBb0I7dUZBQXBCLG9CQUFvQjtjQURoQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi8uLi8uLi8uLi9wby1keW5hbWljL3BvLWR5bmFtaWMtZm9ybS9wby1keW5hbWljLWZvcm0tZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTG9va3VwQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvaW50ZXJmYWNlcy9wby1sb29rdXAtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWxpdGVyYWxzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tbG9va3VwLW1vZGFsL3BvLWxvb2t1cC1tb2RhbC5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgYWJlcnR1cmEgZG8gY29tcG9uZW50ZSBQbyBMb29rdXAgTW9kYWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cE1vZGFsU2VydmljZSB7XG4gIHNlbGVjdFZhbHVlRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgYWJyaXIgYSBtb2RhbCBkZSBidXNjYSBkYXMgaW5mb3JtYcOnw7Vlcy5cbiAgICpcbiAgICogQHBhcmFtIGFkdmFuY2VkRmlsdGVycyB7QXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPn0gT2JqZXRvIHV0aWxpemFkbyBwYXJhIGNyaWFyIG8gYnVzY2EgYXZhbsOnYWRhLlxuICAgKiBAcGFyYW0gc2VydmljZSB7UG9Mb29rdXBGaWx0ZXJ9IFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgcmVhbGl6YXIgYSBidXNjYSBubyBzZXJ2acOnbyBkb3MgZGFkb3MuXG4gICAqIEBwYXJhbSBjb2x1bW5zIHtBcnJheTxQb0xvb2t1cENvbHVtbj59IERlZmluacOnw6NvIGRhcyBjb2x1bmFzIG5hIG1vZGFsIGRlIGJ1c2NhLlxuICAgKiBAcGFyYW0gZmlsdGVyUGFyYW1zIHthbnl9IFZhbG9yIHF1ZSBzZXLDoSByZXBhc3NhZG8gYW9zIG3DqXRvZG9zIGRvIHNlcnZpw6dvIHBhcmEgYXV4aWxpYXIgbm8gZmlsdHJvIGRvcyBkYWRvcy5cbiAgICogQHBhcmFtIHRpdGxlIHtzdHJpbmd9IERlZmluacOnw6NvIGRvIHTDrXR1bG8gZGEgbW9kYWwuXG4gICAqIEBwYXJhbSBsaXRlcmFscyB7UG9Mb29rdXBMaXRlcmFsc30gTGl0ZXJhaXMgdXRpbGl6YWRhcyBubyBjb21wb25lbnRlLlxuICAgKiBAcGFyYW0gc2VsZWN0ZWRJdGVtcyB7YW55fSBWYWxvciBxdWUgZXN0w6Egc2VsZWNpb25hZG8gcXVlIHNlcsOhIHJlcGFzc2FkbyBwYXJhIG8gbW9kYWwgcGFyYSBhcHJlc2VudGFyIG5hIHRhYmVsYS5cbiAgICogQHBhcmFtIGZpZWxkTGFiZWwge3N0cmluZ30gVmFsb3IgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIGRlc2NyacOnw6NvIGRvIGNhbXBvLlxuICAgKiBAcGFyYW0gZmllbGRWYWx1ZSB7c3RyaW5nfSBWYWxvciBxdWUgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gdmFsb3IgZG8gY2FtcG8uXG4gICAqL1xuICBvcGVuTW9kYWwocGFyYW1zOiB7XG4gICAgYWR2YW5jZWRGaWx0ZXJzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+O1xuICAgIHNlcnZpY2U6IFBvTG9va3VwRmlsdGVyO1xuICAgIGNvbHVtbnM6IEFycmF5PFBvTG9va3VwQ29sdW1uPjtcbiAgICBmaWx0ZXJQYXJhbXM6IGFueTtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGxpdGVyYWxzOiBQb0xvb2t1cExpdGVyYWxzO1xuICAgIGluZmluaXRlU2Nyb2xsOiBib29sZWFuO1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIHNlbGVjdGVkSXRlbXM6IEFycmF5PGFueT47XG4gICAgZmllbGRMYWJlbDogc3RyaW5nO1xuICAgIGZpZWxkVmFsdWU6IHN0cmluZztcbiAgfSk6IHZvaWQge1xuICAgIGNvbnN0IHtcbiAgICAgIGFkdmFuY2VkRmlsdGVycyxcbiAgICAgIHNlcnZpY2UsXG4gICAgICBjb2x1bW5zLFxuICAgICAgZmlsdGVyUGFyYW1zLFxuICAgICAgdGl0bGUsXG4gICAgICBsaXRlcmFscyxcbiAgICAgIGluZmluaXRlU2Nyb2xsLFxuICAgICAgbXVsdGlwbGUsXG4gICAgICBzZWxlY3RlZEl0ZW1zLFxuICAgICAgZmllbGRMYWJlbCxcbiAgICAgIGZpZWxkVmFsdWVcbiAgICB9ID0gcGFyYW1zO1xuXG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLnBvQ29tcG9uZW50SW5qZWN0b3IuY3JlYXRlQ29tcG9uZW50SW5BcHBsaWNhdGlvbihQb0xvb2t1cE1vZGFsQ29tcG9uZW50KTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5hZHZhbmNlZEZpbHRlcnMgPSBhZHZhbmNlZEZpbHRlcnM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb2x1bW5zID0gY29sdW1ucztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJTZXJ2aWNlID0gc2VydmljZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJQYXJhbXMgPSBmaWx0ZXJQYXJhbXM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubGl0ZXJhbHMgPSBsaXRlcmFscztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5tb2RlbC5zdWJzY3JpYmUoJGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWUoJGV2ZW50KTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5pbmZpbml0ZVNjcm9sbCA9IGluZmluaXRlU2Nyb2xsO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm11bHRpcGxlID0gbXVsdGlwbGU7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2Uuc2VsZWN0ZWRJdGVtcyA9IHNlbGVjdGVkSXRlbXM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm9wZW5Nb2RhbCgpO1xuICB9XG5cbiAgLy8gRXN0ZSBtZXRvZG8gw6kgY2hhbWFkbyBxdWFuZG8gw6kgc2VsZWNpb25hZG8gdW0gaXRlbSBuYSBsb29rdXAgbW9kYWwuXG4gIHNlbGVjdFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlRXZlbnQuZW1pdCh2YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgfVxufVxuIl19