import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../po-table-icon/po-table-icon.component";
function PoTableColumnIconComponent_po_table_icon_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-table-icon", 1);
    i0.ɵɵlistener("p-click", function PoTableColumnIconComponent_po_table_icon_0_Template_po_table_icon_p_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r3); const column_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.click(column_r1, $event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-clickable", ctx_r0.isClickable(column_r1))("p-color", ctx_r0.getColor(column_r1))("p-disabled", ctx_r0.isDisabled(column_r1))("p-icon", ctx_r0.getIcon(column_r1))("p-icon-tooltip", column_r1.tooltip);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
export class PoTableColumnIconComponent {
    constructor() {
        this._icons = [];
    }
    /** Lista de colunas com ícones. */
    set icons(icons) {
        this._icons = this.convertToColumnIcon(icons);
    }
    get icons() {
        return this._icons;
    }
    click(columnIcon, event) {
        const isAbleAction = !this.isDisabled(columnIcon);
        if (isAbleAction) {
            if (columnIcon.action) {
                columnIcon.action(this.row, columnIcon);
            }
            else if (this.column.action) {
                this.column.action(this.row, columnIcon);
            }
            event.stopPropagation();
        }
    }
    getColor(column) {
        const color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return `po-text-${color}`;
        }
    }
    getIcon(column) {
        return column.icon || column.value;
    }
    isClickable(columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    }
    isDisabled(column) {
        return column.disabled ? column.disabled(this.row) : false;
    }
    trackByFunction(index) {
        return index;
    }
    convertToColumnIcon(rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(rowIcon => (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon));
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    }
}
PoTableColumnIconComponent.ɵfac = function PoTableColumnIconComponent_Factory(t) { return new (t || PoTableColumnIconComponent)(); };
PoTableColumnIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnIconComponent, selectors: [["po-table-column-icon"]], inputs: { column: ["p-column", "column"], row: ["p-row", "row"], icons: ["p-icons", "icons"] }, decls: 1, vars: 2, consts: [[3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click"]], template: function PoTableColumnIconComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableColumnIconComponent_po_table_icon_0_Template, 1, 5, "po-table-icon", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", ctx.icons)("ngForTrackBy", ctx.trackByFunction);
    } }, directives: [i1.NgForOf, i2.PoTableIconComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnIconComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-table-icon\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column, $event)\"\n>\n</po-table-icon>\n" }]
    }], null, { column: [{
            type: Input,
            args: ['p-column']
        }], row: [{
            type: Input,
            args: ['p-row']
        }], icons: [{
            type: Input,
            args: ['p-icons']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRhYmxlL3BvLXRhYmxlLWNvbHVtbi1pY29uL3BvLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4taWNvbi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0lDQTFFLHdDQVFDO0lBREMsK1BBQVcsK0JBQXFCLElBQUM7SUFFbkMsaUJBQWdCOzs7O0lBUGQsMkRBQW1DLHVDQUFBLDRDQUFBLHFDQUFBLHFDQUFBOztBREdyQzs7Ozs7O0dBTUc7QUFNSCxNQUFNLE9BQU8sMEJBQTBCO0lBTHZDO1FBWVUsV0FBTSxHQUE2QixFQUFFLENBQUM7S0EyRC9DO0lBekRDLG1DQUFtQztJQUNuQyxJQUFzQixLQUFLLENBQUMsS0FBd0Q7UUFDbEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQTZCLEVBQUUsS0FBSztRQUN4QyxNQUFNLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFbEQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUNyQixVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDekM7aUJBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUMxQztZQUNELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRCxRQUFRLENBQUMsTUFBeUI7UUFDaEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBRWpHLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxXQUFXLEtBQUssRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUF5QjtRQUMvQixPQUFPLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVyxDQUFDLFVBQTZCO1FBQ3ZDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUF5QjtRQUNsQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDN0QsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFLO1FBQ25CLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLG1CQUFtQixDQUFDLFFBQTJEO1FBQ3JGLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixPQUFhLFFBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDckc7UUFFRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM5QjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7b0dBakVVLDBCQUEwQjs2RUFBMUIsMEJBQTBCO1FDakJ2QywrRkFTZ0I7O1FBUkssbUNBQVUscUNBQUE7O3VGRGdCbEIsMEJBQTBCO2NBTHRDLFNBQVM7MkJBQ0Usc0JBQXNCLG1CQUVmLHVCQUF1QixDQUFDLE1BQU07Z0JBSTVCLE1BQU07a0JBQXhCLEtBQUs7bUJBQUMsVUFBVTtZQUdELEdBQUc7a0JBQWxCLEtBQUs7bUJBQUMsT0FBTztZQUtRLEtBQUs7a0JBQTFCLEtBQUs7bUJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVGFibGVDb2x1bW4gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9UYWJsZUNvbHVtbkljb24gfSBmcm9tICcuL3BvLXRhYmxlLWNvbHVtbi1pY29uLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGV4aWJpciDDrWNvbmVzIG5hcyBjb2x1bmFzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10YWJsZS1jb2x1bW4taWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBvVGFibGVDb2x1bW5JY29uQ29tcG9uZW50IHtcbiAgLyoqIERlZmluacOnw6NvIGRhIGNvbHVuYSBxdWUgdXRpbGl6YSBvcyBpY29uZXMuICovXG4gIEBJbnB1dCgncC1jb2x1bW4nKSBjb2x1bW46IFBvVGFibGVDb2x1bW47XG5cbiAgLyoqIERhZG9zIGRhIGxpbmhhIGRhIHRhYmVsYS4gKi9cbiAgQElucHV0KCdwLXJvdycpIHJvdzogYW55O1xuXG4gIHByaXZhdGUgX2ljb25zOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4gPSBbXTtcblxuICAvKiogTGlzdGEgZGUgY29sdW5hcyBjb20gw61jb25lcy4gKi9cbiAgQElucHV0KCdwLWljb25zJykgc2V0IGljb25zKGljb25zOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4gfCBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvbnMgPSB0aGlzLmNvbnZlcnRUb0NvbHVtbkljb24oaWNvbnMpO1xuICB9XG5cbiAgZ2V0IGljb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9pY29ucztcbiAgfVxuXG4gIGNsaWNrKGNvbHVtbkljb246IFBvVGFibGVDb2x1bW5JY29uLCBldmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGlzQWJsZUFjdGlvbiA9ICF0aGlzLmlzRGlzYWJsZWQoY29sdW1uSWNvbik7XG5cbiAgICBpZiAoaXNBYmxlQWN0aW9uKSB7XG4gICAgICBpZiAoY29sdW1uSWNvbi5hY3Rpb24pIHtcbiAgICAgICAgY29sdW1uSWNvbi5hY3Rpb24odGhpcy5yb3csIGNvbHVtbkljb24pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbHVtbi5hY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jb2x1bW4uYWN0aW9uKHRoaXMucm93LCBjb2x1bW5JY29uKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGdldENvbG9yKGNvbHVtbjogUG9UYWJsZUNvbHVtbkljb24pOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbG9yID0gdHlwZW9mIGNvbHVtbi5jb2xvciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbHVtbi5jb2xvcih0aGlzLnJvdywgY29sdW1uKSA6IGNvbHVtbi5jb2xvcjtcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgcmV0dXJuIGBwby10ZXh0LSR7Y29sb3J9YDtcbiAgICB9XG4gIH1cblxuICBnZXRJY29uKGNvbHVtbjogUG9UYWJsZUNvbHVtbkljb24pIHtcbiAgICByZXR1cm4gY29sdW1uLmljb24gfHwgY29sdW1uLnZhbHVlO1xuICB9XG5cbiAgaXNDbGlja2FibGUoY29sdW1uSWNvbjogUG9UYWJsZUNvbHVtbkljb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEoIXRoaXMuaXNEaXNhYmxlZChjb2x1bW5JY29uKSAmJiAoY29sdW1uSWNvbi5hY3Rpb24gfHwgdGhpcy5jb2x1bW4uYWN0aW9uKSk7XG4gIH1cblxuICBpc0Rpc2FibGVkKGNvbHVtbjogUG9UYWJsZUNvbHVtbkljb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gY29sdW1uLmRpc2FibGVkID8gY29sdW1uLmRpc2FibGVkKHRoaXMucm93KSA6IGZhbHNlO1xuICB9XG5cbiAgdHJhY2tCeUZ1bmN0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0VG9Db2x1bW5JY29uKHJvd0ljb25zOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4gfCBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKTogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dJY29ucykpIHtcbiAgICAgIHJldHVybiAoPGFueT5yb3dJY29ucykubWFwKHJvd0ljb24gPT4gKHR5cGVvZiByb3dJY29uID09PSAnc3RyaW5nJyA/IHsgdmFsdWU6IHJvd0ljb24gfSA6IHJvd0ljb24pKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJvd0ljb25zID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIFt7IHZhbHVlOiByb3dJY29ucyB9XTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cbn1cbiIsIjxwby10YWJsZS1pY29uXG4gICpuZ0Zvcj1cImxldCBjb2x1bW4gb2YgaWNvbnM7IHRyYWNrQnk6IHRyYWNrQnlGdW5jdGlvblwiXG4gIFtwLWNsaWNrYWJsZV09XCJpc0NsaWNrYWJsZShjb2x1bW4pXCJcbiAgW3AtY29sb3JdPVwiZ2V0Q29sb3IoY29sdW1uKVwiXG4gIFtwLWRpc2FibGVkXT1cImlzRGlzYWJsZWQoY29sdW1uKVwiXG4gIFtwLWljb25dPVwiZ2V0SWNvbihjb2x1bW4pXCJcbiAgW3AtaWNvbi10b29sdGlwXT1cImNvbHVtbi50b29sdGlwXCJcbiAgKHAtY2xpY2spPVwiY2xpY2soY29sdW1uLCAkZXZlbnQpXCJcbj5cbjwvcG8tdGFibGUtaWNvbj5cbiJdfQ==