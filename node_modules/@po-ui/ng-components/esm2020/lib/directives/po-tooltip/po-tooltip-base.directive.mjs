import { __decorate } from "tslib";
import { Input, Directive } from '@angular/core';
import { InputBoolean } from '../../decorators';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
import * as i0 from "@angular/core";
const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
 */
export class PoTooltipBaseDirective {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define que o po-tooltip será incluido no body e não dentro do elemento ao qual o tooltip foi especificado.
         * Opção necessária para o caso de uso de tooltip em um elemento SVG.
         *
         * @default `false`
         */
        this.appendInBody = false;
        this._tooltipPosition = 'bottom';
        this._displayTooltip = false;
        this._tooltip = '';
    }
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip.
     *
     * **Como boa prática, indica-se utilizar um texto com até 140 caracteres.**
     */
    set tooltip(tooltip) {
        this._tooltip = tooltip;
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
    set displayTooltip(value) {
        this._displayTooltip = value;
        this._displayTooltip ? this.addTooltipAction() : this.removeTooltipAction();
    }
    get displayTooltip() {
        return this._displayTooltip;
    }
}
PoTooltipBaseDirective.ɵfac = function PoTooltipBaseDirective_Factory(t) { return new (t || PoTooltipBaseDirective)(); };
PoTooltipBaseDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipBaseDirective, inputs: { appendInBody: ["p-append-in-body", "appendInBody"], tooltip: ["p-tooltip", "tooltip"], tooltipPosition: ["p-tooltip-position", "tooltipPosition"], displayTooltip: ["p-display-tooltip", "displayTooltip"] } });
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "appendInBody", void 0);
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "displayTooltip", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipBaseDirective, [{
        type: Directive
    }], null, { appendInBody: [{
            type: Input,
            args: ['p-append-in-body']
        }], tooltip: [{
            type: Input,
            args: ['p-tooltip']
        }], tooltipPosition: [{
            type: Input,
            args: ['p-tooltip-position']
        }], displayTooltip: [{
            type: Input,
            args: ['p-display-tooltip']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbHRpcC1iYXNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvZGlyZWN0aXZlcy9wby10b29sdGlwL3BvLXRvb2x0aXAtYmFzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQzs7QUFFMUcsTUFBTSwyQkFBMkIsR0FBRyxRQUFRLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7O0dBV0c7QUFHSCxNQUFNLE9BQWdCLHNCQUFzQjtJQUQ1QztRQUVFOzs7Ozs7Ozs7V0FTRztRQUN3QyxpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUUvRCxxQkFBZ0IsR0FBWSxRQUFRLENBQUM7UUFHdkMsb0JBQWUsR0FBWSxLQUFLLENBQUM7UUFDakMsYUFBUSxHQUFXLEVBQUUsQ0FBQztLQTJEL0I7SUF6REM7Ozs7OztPQU1HO0lBQ0gsSUFBd0IsT0FBTyxDQUFDLE9BQWU7UUFDN0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXdCRztJQUNILElBQWlDLGVBQWUsQ0FBQyxRQUFnQjtRQUMvRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDO0lBQzNHLENBQUM7SUFDRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztJQUUyQyxJQUFJLGNBQWMsQ0FBQyxLQUFjO1FBQzNFLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM5RSxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDOzs0RkF4RW1CLHNCQUFzQjt5RUFBdEIsc0JBQXNCO0FBV0M7SUFBZixZQUFZLEVBQUU7NERBQStCO0FBc0Q3QjtJQUFmLFlBQVksRUFBRTs0REFHMUM7dUZBcEVtQixzQkFBc0I7Y0FEM0MsU0FBUztnQkFZbUMsWUFBWTtrQkFBdEQsS0FBSzttQkFBQyxrQkFBa0I7WUFlRCxPQUFPO2tCQUE5QixLQUFLO21CQUFDLFdBQVc7WUFnQ2UsZUFBZTtrQkFBL0MsS0FBSzttQkFBQyxvQkFBb0I7WUFPcUIsY0FBYztrQkFBN0QsS0FBSzttQkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uLy4uL2RlY29yYXRvcnMnO1xuXG5pbXBvcnQgeyBQT19DT05UUk9MX1BPU0lUSU9OUyB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvcG8tY29udHJvbC1wb3NpdGlvbi9wby1jb250cm9sLXBvc2l0aW9uLmNvbnN0YW50cyc7XG5cbmNvbnN0IFBPX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVCA9ICdib3R0b20nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEEgZGlyZXRpdmEgcG8tdG9vbHRpcCBkZXZlIHNlciB1dGlsaXphZGEgcGFyYSBvZmVyZWNlciBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgcXVhbmRvIG9zIHVzdcOhcmlvc1xuICogcGFzc2FtIG8gbW91c2Ugc29icmUgbyBlbGVtZW50byBhbHZvIGFvIHF1YWwgZWxhIGVzdMOhIGF0cmlidcOtZGEuXG4gKlxuICogTyBjb250ZcO6ZG8gw6kgZm9ybWFkbyBwb3IgdW0gcGVxdWVubyB0ZXh0byBxdWUgZGV2ZSBjb250cmlidWlyIHBhcmEgdW1hIHRvbWFkYSBkZSBkZWNpc8OjbyBvdVxuICogb3JpZW50YcOnw6NvIGRvIHVzdcOhcmlvLiBBIGF0aXZhw6fDo28gZGVsZSBwb2RlIGVzdGFyIGVtIHF1YWxxdWVyIGNvbXBvbmVudGUgb3UgdGFnIEhUTUwuXG4gKlxuICogUGFyYSB0ZXh0b3MgbWFpb3JlcyBvdSBubyBjYXNvIGRlIGhhdmVyIGEgbmVjZXNzaWRhZGUgZGUgdXRpbGl6YXIgYWxndW0gb3V0cm8gZWxlbWVudG8gY29tb1xuICogY29udGXDumRvIGRldmUtc2UgdXRpbGl6YXIgbyBbKipwby1wb3BvdmVyKipdKGh0dHBzOi8vcG8tdWkuaW8vZG9jdW1lbnRhdGlvbi9wby1wb3BvdmVyP3ZpZXc9ZG9jKS5cbiAqL1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1Rvb2x0aXBCYXNlRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHF1ZSBvIHBvLXRvb2x0aXAgc2Vyw6EgaW5jbHVpZG8gbm8gYm9keSBlIG7Do28gZGVudHJvIGRvIGVsZW1lbnRvIGFvIHF1YWwgbyB0b29sdGlwIGZvaSBlc3BlY2lmaWNhZG8uXG4gICAqIE9ww6fDo28gbmVjZXNzw6FyaWEgcGFyYSBvIGNhc28gZGUgdXNvIGRlIHRvb2x0aXAgZW0gdW0gZWxlbWVudG8gU1ZHLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtYXBwZW5kLWluLWJvZHknKSBASW5wdXRCb29sZWFuKCkgYXBwZW5kSW5Cb2R5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIF90b29sdGlwUG9zaXRpb24/OiBzdHJpbmcgPSAnYm90dG9tJztcbiAgcHJvdGVjdGVkIHRvb2x0aXBDb250ZW50O1xuXG4gIHByaXZhdGUgX2Rpc3BsYXlUb29sdGlwOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3Rvb2x0aXA6IHN0cmluZyA9ICcnO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSGFiaWxpdGEgZSBhdHJpYnVpIHVtIHRleHRvIGFvIHBvLXRvb2x0aXAuXG4gICAqXG4gICAqICoqQ29tbyBib2EgcHLDoXRpY2EsIGluZGljYS1zZSB1dGlsaXphciB1bSB0ZXh0byBjb20gYXTDqSAxNDAgY2FyYWN0ZXJlcy4qKlxuICAgKi9cbiAgQElucHV0KCdwLXRvb2x0aXAnKSBzZXQgdG9vbHRpcCh0b29sdGlwOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b29sdGlwID0gdG9vbHRpcDtcbiAgfVxuICBnZXQgdG9vbHRpcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9vbHRpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIHBvc2nDp8OjbyBxdWUgbyBwby10b29sdGlwIGFicmlyw6EgZW0gcmVsYcOnw6NvIGFvIGNvbXBvbmVudGUgYWx2by4gU3VnZXJlLXNlIHF1ZSBzZWphXG4gICAqIHVzYWRhIGEgb3JpZW50YcOnw6NvIFwiYm90dG9tXCIgKGFiYWl4byksIHBvcsOpbSBvIG1lc21vIMOpIGZsZXjDrXZlbCBlIHNlcsOhIHJvdGFjaW9uYWRvXG4gICAqIGF1dG9tYXRpY2FtZW50ZSBwYXJhIHNlIGFkZXF1YXIgYSB0ZWxhLCBjYXNvIG5lY2Vzc8OhcmlvLlxuICAgKlxuICAgKiBQb3Npw6fDtWVzIHbDoWxpZGFzOlxuICAgKiAtIGByaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBkaXJlaXRvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgcmlnaHQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGByaWdodC10b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZGlyZWl0byBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWJhaXhvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLWxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFiYWl4byBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBlc3F1ZXJkbyBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnQtdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdC1ib3R0b21gOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZXNxdWVyZG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFjaW1hIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhY2ltYSBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3AtbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGJvdHRvbVxuICAgKi9cbiAgQElucHV0KCdwLXRvb2x0aXAtcG9zaXRpb24nKSBzZXQgdG9vbHRpcFBvc2l0aW9uKHBvc2l0aW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b29sdGlwUG9zaXRpb24gPSBQT19DT05UUk9MX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3NpdGlvbikgPyBwb3NpdGlvbiA6IFBPX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVDtcbiAgfVxuICBnZXQgdG9vbHRpcFBvc2l0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXBQb3NpdGlvbjtcbiAgfVxuXG4gIEBJbnB1dCgncC1kaXNwbGF5LXRvb2x0aXAnKSBASW5wdXRCb29sZWFuKCkgc2V0IGRpc3BsYXlUb29sdGlwKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzcGxheVRvb2x0aXAgPSB2YWx1ZTtcbiAgICB0aGlzLl9kaXNwbGF5VG9vbHRpcCA/IHRoaXMuYWRkVG9vbHRpcEFjdGlvbigpIDogdGhpcy5yZW1vdmVUb29sdGlwQWN0aW9uKCk7XG4gIH1cblxuICBnZXQgZGlzcGxheVRvb2x0aXAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXlUb29sdGlwO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFkZFRvb2x0aXBBY3Rpb24oKTtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJlbW92ZVRvb2x0aXBBY3Rpb24oKTtcbn1cbiJdfQ==