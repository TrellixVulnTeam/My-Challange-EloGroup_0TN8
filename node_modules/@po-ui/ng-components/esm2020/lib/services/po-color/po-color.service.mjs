import { Injectable } from '@angular/core';
import { PoColorPaletteEnum } from '../../enums/po-color-palette.enum';
import { PoDefaultColors } from './po-colors.constant';
import * as i0 from "@angular/core";
const poColorPalette = Object.values(PoColorPaletteEnum);
export class PoColorService {
    constructor() {
        this.defaultColors = [];
    }
    /**
     * Avalia a propriedade `color` na lista de items passada. Caso sim, trata se é decimal ou string `po-color`. Caso não haja, retorna a cor default.
     *
     * @param data
     */
    getColors(data) {
        this.verifyIfHasColorProperty(data);
        return data.map((dataItem, index) => {
            if (dataItem.color) {
                dataItem.color = this.verifyIfIsPoColorPalette(dataItem.color);
                return dataItem;
            }
            const color = this.defaultColors[index];
            return { ...dataItem, color };
        });
    }
    verifyIfHasColorProperty(data) {
        const hasColorProperty = data.every(dataItem => dataItem.hasOwnProperty('color') && dataItem.color?.length > 0);
        if (!hasColorProperty) {
            this.defaultColors = this.getDefaultColors(data.length);
        }
    }
    verifyIfIsPoColorPalette(color) {
        if (poColorPalette.includes(color)) {
            return `po-${color}`;
        }
        return color;
    }
    getDefaultColors(length) {
        if (length === 1) {
            return PoDefaultColors[0];
        }
        const colorsLength = PoDefaultColors.length;
        if (length > colorsLength) {
            const quantityDuplicates = length / colorsLength;
            let colors = PoDefaultColors[colorsLength - 1];
            for (let i = 0; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoDefaultColors[colorsLength]);
            }
            return colors;
        }
        return PoDefaultColors[length - 1];
    }
}
PoColorService.ɵfac = function PoColorService_Factory(t) { return new (t || PoColorService)(); };
PoColorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoColorService, factory: PoColorService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29sb3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvc2VydmljZXMvcG8tY29sb3IvcG8tY29sb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFFdkQsTUFBTSxjQUFjLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBU2hFLE1BQU0sT0FBTyxjQUFjO0lBSDNCO1FBSUUsa0JBQWEsR0FBa0IsRUFBRSxDQUFDO0tBd0RuQztJQXREQzs7OztPQUlHO0lBQ0gsU0FBUyxDQUF3QixJQUFjO1FBQzdDLElBQUksQ0FBQyx3QkFBd0IsQ0FBSSxJQUFJLENBQUMsQ0FBQztRQUV2QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO2dCQUNsQixRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBRS9ELE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QyxPQUFPLEVBQUUsR0FBRyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sd0JBQXdCLENBQXdCLElBQWM7UUFDcEUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNoSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztJQUVPLHdCQUF3QixDQUFDLEtBQWE7UUFDNUMsSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLE9BQU8sTUFBTSxLQUFLLEVBQUUsQ0FBQztTQUN0QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLGdCQUFnQixDQUFDLE1BQWM7UUFDckMsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2hCLE9BQU8sZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUU1QyxJQUFJLE1BQU0sR0FBRyxZQUFZLEVBQUU7WUFDekIsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLEdBQUcsWUFBWSxDQUFDO1lBQ2pELElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFL0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGtCQUFrQixFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUN2RDtZQUVELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7NEVBeERVLGNBQWM7b0VBQWQsY0FBYyxXQUFkLGNBQWMsbUJBRmIsTUFBTTt1RkFFUCxjQUFjO2NBSDFCLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9Db2xvclBhbGV0dGVFbnVtIH0gZnJvbSAnLi4vLi4vZW51bXMvcG8tY29sb3ItcGFsZXR0ZS5lbnVtJztcbmltcG9ydCB7IFBvRGVmYXVsdENvbG9ycyB9IGZyb20gJy4vcG8tY29sb3JzLmNvbnN0YW50JztcblxuY29uc3QgcG9Db2xvclBhbGV0dGUgPSAoPGFueT5PYmplY3QpLnZhbHVlcyhQb0NvbG9yUGFsZXR0ZUVudW0pO1xuXG5pbnRlcmZhY2UgUG9Db2xvckFyZ3Mge1xuICBjb2xvcj86IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Db2xvclNlcnZpY2Uge1xuICBkZWZhdWx0Q29sb3JzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgLyoqXG4gICAqIEF2YWxpYSBhIHByb3ByaWVkYWRlIGBjb2xvcmAgbmEgbGlzdGEgZGUgaXRlbXMgcGFzc2FkYS4gQ2FzbyBzaW0sIHRyYXRhIHNlIMOpIGRlY2ltYWwgb3Ugc3RyaW5nIGBwby1jb2xvcmAuIENhc28gbsOjbyBoYWphLCByZXRvcm5hIGEgY29yIGRlZmF1bHQuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqL1xuICBnZXRDb2xvcnM8VCBleHRlbmRzIFBvQ29sb3JBcmdzPihkYXRhOiBBcnJheTxUPik6IEFycmF5PFQ+IHtcbiAgICB0aGlzLnZlcmlmeUlmSGFzQ29sb3JQcm9wZXJ0eTxUPihkYXRhKTtcblxuICAgIHJldHVybiBkYXRhLm1hcCgoZGF0YUl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAoZGF0YUl0ZW0uY29sb3IpIHtcbiAgICAgICAgZGF0YUl0ZW0uY29sb3IgPSB0aGlzLnZlcmlmeUlmSXNQb0NvbG9yUGFsZXR0ZShkYXRhSXRlbS5jb2xvcik7XG5cbiAgICAgICAgcmV0dXJuIGRhdGFJdGVtO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb2xvciA9IHRoaXMuZGVmYXVsdENvbG9yc1tpbmRleF07XG4gICAgICByZXR1cm4geyAuLi5kYXRhSXRlbSwgY29sb3IgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5SWZIYXNDb2xvclByb3BlcnR5PFQgZXh0ZW5kcyBQb0NvbG9yQXJncz4oZGF0YTogQXJyYXk8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBoYXNDb2xvclByb3BlcnR5ID0gZGF0YS5ldmVyeShkYXRhSXRlbSA9PiBkYXRhSXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29sb3InKSAmJiBkYXRhSXRlbS5jb2xvcj8ubGVuZ3RoID4gMCk7XG4gICAgaWYgKCFoYXNDb2xvclByb3BlcnR5KSB7XG4gICAgICB0aGlzLmRlZmF1bHRDb2xvcnMgPSB0aGlzLmdldERlZmF1bHRDb2xvcnMoZGF0YS5sZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5SWZJc1BvQ29sb3JQYWxldHRlKGNvbG9yOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChwb0NvbG9yUGFsZXR0ZS5pbmNsdWRlcyhjb2xvcikpIHtcbiAgICAgIHJldHVybiBgcG8tJHtjb2xvcn1gO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHRDb2xvcnMobGVuZ3RoOiBudW1iZXIpOiBBcnJheTxzdHJpbmc+IHtcbiAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gUG9EZWZhdWx0Q29sb3JzWzBdO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yc0xlbmd0aCA9IFBvRGVmYXVsdENvbG9ycy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoID4gY29sb3JzTGVuZ3RoKSB7XG4gICAgICBjb25zdCBxdWFudGl0eUR1cGxpY2F0ZXMgPSBsZW5ndGggLyBjb2xvcnNMZW5ndGg7XG4gICAgICBsZXQgY29sb3JzID0gUG9EZWZhdWx0Q29sb3JzW2NvbG9yc0xlbmd0aCAtIDFdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBxdWFudGl0eUR1cGxpY2F0ZXM7IGkrKykge1xuICAgICAgICBjb2xvcnMgPSBjb2xvcnMuY29uY2F0KFBvRGVmYXVsdENvbG9yc1tjb2xvcnNMZW5ndGhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbG9ycztcbiAgICB9XG5cbiAgICByZXR1cm4gUG9EZWZhdWx0Q29sb3JzW2xlbmd0aCAtIDFdO1xuICB9XG59XG4iXX0=