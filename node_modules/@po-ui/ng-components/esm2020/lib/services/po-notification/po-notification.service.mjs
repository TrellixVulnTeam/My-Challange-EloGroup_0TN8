import { Injectable } from '@angular/core';
import { PoNotificationBaseService } from './po-notification-base.service';
import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterComponent } from './po-toaster/po-toaster.component';
import { timer } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./../po-component-injector/po-component-injector.service";
const PoNotificationMaxLength = 5;
const PoNotificationFadeTime = 200;
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
export class PoNotificationService extends PoNotificationBaseService {
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    createToaster(toaster) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        const stack = toaster.orientation === PoToasterOrientation.Top ? this.stackTop : this.stackBottom;
        stack.push(componentRef);
        this.verifyLimitToaster(stack);
        this.observableOnClose(componentRef);
        if (!(toaster.action && toaster.actionLabel)) {
            timer(toaster.duration)
                .pipe(takeWhile(() => componentRef.instance.alive))
                .subscribe(() => {
                this.destroyToaster(componentRef);
            });
        }
    }
    destroyToaster(toaster) {
        let stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        toaster.instance.setFadeOut();
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        setTimeout(() => {
            this.poComponentInjector.destroyComponentInApplication(toaster);
            for (let count = 0; count < stack.length; count++) {
                stack[count].instance.changePosition(count);
            }
        }, PoNotificationFadeTime);
    }
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe(() => {
            this.destroyToaster(componentRef);
        });
    }
    verifyLimitToaster(stack) {
        if (stack.length > PoNotificationMaxLength) {
            this.destroyToaster(stack[0]);
        }
    }
}
PoNotificationService.ɵfac = function PoNotificationService_Factory(t) { return new (t || PoNotificationService)(i0.ɵɵinject(i1.PoComponentInjectorService)); };
PoNotificationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoNotificationService, factory: PoNotificationService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.PoComponentInjectorService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL3NlcnZpY2VzL3BvLW5vdGlmaWNhdGlvbi9wby1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd6RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUUzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNoRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRTNDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFDO0FBRW5DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBS0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHlCQUF5QjtJQUNsRSxZQUFvQixtQkFBK0M7UUFDakUsS0FBSyxFQUFFLENBQUM7UUFEVSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTRCO0lBRW5FLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBa0I7UUFDOUIsTUFBTSxZQUFZLEdBQXNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xILE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNsRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXpCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDNUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7aUJBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbEQsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0lBRUQsY0FBYyxDQUFDLE9BQVk7UUFDekIsSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtZQUM3RCxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN2QjthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDMUI7UUFFRCxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDakQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0M7UUFDSCxDQUFDLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU8saUJBQWlCLENBQUMsWUFBaUI7UUFDekMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsS0FBaUI7UUFDMUMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLHVCQUF1QixFQUFFO1lBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDOzswRkExRFUscUJBQXFCOzJFQUFyQixxQkFBcUIsV0FBckIscUJBQXFCLG1CQUZwQixNQUFNO3VGQUVQLHFCQUFxQjtjQUhqQyxVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UgfSBmcm9tICcuLy4uL3BvLWNvbXBvbmVudC1pbmplY3Rvci9wby1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBQb05vdGlmaWNhdGlvbkJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9wby1ub3RpZmljYXRpb24tYmFzZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvVG9hc3RlciB9IGZyb20gJy4vcG8tdG9hc3Rlci9wby10b2FzdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vcG8tdG9hc3Rlci9wby10b2FzdGVyLW9yaWVudGF0aW9uLmVudW0nO1xuaW1wb3J0IHsgUG9Ub2FzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9wby10b2FzdGVyL3BvLXRvYXN0ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IHRpbWVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlV2hpbGUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IFBvTm90aWZpY2F0aW9uTWF4TGVuZ3RoID0gNTtcbmNvbnN0IFBvTm90aWZpY2F0aW9uRmFkZVRpbWUgPSAyMDA7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvTm90aWZpY2F0aW9uQmFzZVNlcnZpY2VcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1ub3RpZmljYXRpb24tYmFzaWNcIiB0aXRsZT1cIlBPIE5vdGlmaWNhdGlvbiBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljL3NhbXBsZS1wby1ub3RpZmljYXRpb24tYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljL3NhbXBsZS1wby1ub3RpZmljYXRpb24tYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbm90aWZpY2F0aW9uLWxhYnNcIiB0aXRsZT1cIlBPIE5vdGlmaWNhdGlvbiBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW5vdGlmaWNhdGlvbi1zYWxlc1wiIHRpdGxlPVwiUE8gTm90aWZpY2F0aW9uIC0gU2FsZXNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Ob3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcG9Db21wb25lbnRJbmplY3RvcjogUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY3JlYXRlVG9hc3Rlcih0b2FzdGVyOiBQb1RvYXN0ZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oUG9Ub2FzdGVyQ29tcG9uZW50KTtcbiAgICB0b2FzdGVyLmNvbXBvbmVudFJlZiA9IGNvbXBvbmVudFJlZjtcblxuICAgIGNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbmZpZ1RvYXN0ZXIodG9hc3Rlcik7XG5cbiAgICBjb25zdCBzdGFjayA9IHRvYXN0ZXIub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCA/IHRoaXMuc3RhY2tUb3AgOiB0aGlzLnN0YWNrQm90dG9tO1xuICAgIHN0YWNrLnB1c2goY29tcG9uZW50UmVmKTtcblxuICAgIHRoaXMudmVyaWZ5TGltaXRUb2FzdGVyKHN0YWNrKTtcblxuICAgIHRoaXMub2JzZXJ2YWJsZU9uQ2xvc2UoY29tcG9uZW50UmVmKTtcblxuICAgIGlmICghKHRvYXN0ZXIuYWN0aW9uICYmIHRvYXN0ZXIuYWN0aW9uTGFiZWwpKSB7XG4gICAgICB0aW1lcih0b2FzdGVyLmR1cmF0aW9uKVxuICAgICAgICAucGlwZSh0YWtlV2hpbGUoKCkgPT4gY29tcG9uZW50UmVmLmluc3RhbmNlLmFsaXZlKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kZXN0cm95VG9hc3Rlcihjb21wb25lbnRSZWYpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95VG9hc3Rlcih0b2FzdGVyOiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgc3RhY2s7XG4gICAgaWYgKHRvYXN0ZXIuaW5zdGFuY2Uub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgc3RhY2sgPSB0aGlzLnN0YWNrVG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFjayA9IHRoaXMuc3RhY2tCb3R0b207XG4gICAgfVxuXG4gICAgdG9hc3Rlci5pbnN0YW5jZS5zZXRGYWRlT3V0KCk7XG4gICAgY29uc3QgaW5kZXggPSBzdGFjay5pbmRleE9mKHRvYXN0ZXIpO1xuICAgIHN0YWNrLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucG9Db21wb25lbnRJbmplY3Rvci5kZXN0cm95Q29tcG9uZW50SW5BcHBsaWNhdGlvbih0b2FzdGVyKTtcbiAgICAgIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzdGFjay5sZW5ndGg7IGNvdW50KyspIHtcbiAgICAgICAgc3RhY2tbY291bnRdLmluc3RhbmNlLmNoYW5nZVBvc2l0aW9uKGNvdW50KTtcbiAgICAgIH1cbiAgICB9LCBQb05vdGlmaWNhdGlvbkZhZGVUaW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgb2JzZXJ2YWJsZU9uQ2xvc2UoY29tcG9uZW50UmVmOiBhbnkpIHtcbiAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uub2JzZXJ2YWJsZU9uQ2xvc2Uuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIoY29tcG9uZW50UmVmKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5TGltaXRUb2FzdGVyKHN0YWNrOiBBcnJheTxhbnk+KSB7XG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IFBvTm90aWZpY2F0aW9uTWF4TGVuZ3RoKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lUb2FzdGVyKHN0YWNrWzBdKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==