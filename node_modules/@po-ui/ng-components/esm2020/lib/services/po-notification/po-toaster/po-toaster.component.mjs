import { Component, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { PoToasterBaseComponent } from './po-toaster-base.component';
import { PoToasterType } from './po-toaster-type.enum';
import { PoToasterOrientation } from './po-toaster-orientation.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../po-language/po-language.service";
import * as i2 from "@angular/common";
const _c0 = ["toaster"];
function PoToasterComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵlistener("click", function PoToasterComponent_div_6_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.poToasterAction($event); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.actionLabel, " ");
} }
/**
 * @docsPrivate
 *
 * @docsExtends PoToasterBaseComponent
 */
export class PoToasterComponent extends PoToasterBaseComponent {
    constructor(languageService, changeDetector, elementeRef, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.elementeRef = elementeRef;
        this.renderer = renderer;
        this.alive = true;
        /* Margem do Toaster referênte à sua orientação e posição*/
        this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        this.observableOnClose = new Subject();
        /* Posição do Toaster*/
        this.toasterPosition = 'po-toaster-bottom';
    }
    ngOnDestroy() {
        this.alive = false;
    }
    ngAfterViewInit() {
        setTimeout(() => this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-visible'));
    }
    /* Muda a posição do Toaster na tela*/
    changePosition(position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + 44 * position + position * 6;
        if (this.orientation === PoToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    }
    /* Fecha o componente Toaster */
    close() {
        this.observableOnClose.next(true);
    }
    setFadeOut() {
        this.renderer.removeClass(this.toaster.nativeElement, 'po-toaster-visible');
        this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-invisible');
    }
    /* Configura o Toaster com os atributos passados para ele */
    configToaster(poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = poToaster.actionLabel;
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'po-icon-warning';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'po-icon-info';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'po-icon-ok';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'po-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    }
    getIcon() {
        return this.icon;
    }
    getToasterPosition() {
        return this.toasterPosition;
    }
    getToasterType() {
        return this.toasterType;
    }
    onButtonClose(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.action && !this.actionLabel) {
            this.poToasterAction(event);
        }
        else {
            this.close();
        }
    }
    /* Chama a função passada pelo atributo `action` */
    poToasterAction(event) {
        event.preventDefault();
        event.stopPropagation();
        this.action(this);
    }
}
PoToasterComponent.ɵfac = function PoToasterComponent_Factory(t) { return new (t || PoToasterComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoToasterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToasterComponent, selectors: [["po-toaster"]], viewQuery: function PoToasterComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toaster = _t.first);
    } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 9, consts: [[3, "click"], ["toaster", ""], [1, "po-toaster-icon"], [1, "po-toaster-message"], ["class", "po-toaster-action", 3, "click", 4, "ngIf"], [1, "po-toaster-close", 3, "click"], [1, "po-icon", "po-icon-close"], [1, "po-toaster-action", 3, "click"]], template: function PoToasterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("click", function PoToasterComponent_Template_div_click_0_listener() { return ctx.close(); });
        i0.ɵɵelementStart(2, "div", 2);
        i0.ɵɵelement(3, "span");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "div", 3);
        i0.ɵɵtext(5);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(6, PoToasterComponent_div_6_Template, 2, 1, "div", 4);
        i0.ɵɵelementStart(7, "button", 5);
        i0.ɵɵlistener("click", function PoToasterComponent_Template_button_click_7_listener($event) { return ctx.onButtonClose($event); });
        i0.ɵɵelement(8, "span", 6);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        i0.ɵɵclassMapInterpolate2("po-toaster ", ctx.getToasterType(), " ", ctx.getToasterPosition(), " po-clickable");
        i0.ɵɵadvance(3);
        i0.ɵɵclassMapInterpolate1("po-icon ", ctx.getIcon(), "");
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx.message);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.action && ctx.actionLabel);
    } }, directives: [i2.NgIf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToasterComponent, [{
        type: Component,
        args: [{ selector: 'po-toaster', template: "<div #toaster class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }} po-clickable\" (click)=\"close()\">\n  <div class=\"po-toaster-icon\">\n    <span class=\"po-icon {{ getIcon() }}\"></span>\n  </div>\n\n  <div class=\"po-toaster-message\">{{ message }}</div>\n\n  <div *ngIf=\"action && actionLabel\" (click)=\"poToasterAction($event)\" class=\"po-toaster-action\">\n    {{ actionLabel }}\n  </div>\n\n  <button class=\"po-toaster-close\" (click)=\"onButtonClose($event)\">\n    <span class=\"po-icon po-icon-close\"></span>\n  </button>\n</div>\n" }]
    }], function () { return [{ type: i1.PoLanguageService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { toaster: [{
            type: ViewChild,
            args: ['toaster']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,