import Loki from 'lokijs';
import LokiIndexedAdapter from 'lokijs/src/loki-indexed-adapter';
const keyField = 'key';
export class PoLokiDriver {
    constructor() {
        const self = this;
        this.driver = {
            _driver: 'lokijs',
            _initStorage: function (options) {
                return self.initStorage(options);
            },
            clear: function () {
                return self.clear(this);
            },
            getItem: function (key) {
                return self.getItem(this, key);
            },
            iterate: function (iteratorCallback) {
                return self.iterate(this, iteratorCallback);
            },
            key: function (n) {
                return self.key(this, n);
            },
            keys: function () {
                return self.keys(this);
            },
            length: function () {
                return self.length(this);
            },
            removeItem: function (key) {
                return self.removeItem(this, key);
            },
            setItem: function (key, value) {
                return self.setItem(this, key, value);
            }
        };
    }
    // Funções de iteração
    clear(localforage) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollectionAndDataInCollection()) {
                    this.clearCollection();
                }
                resolve(null);
            });
        });
    }
    getItem(localforage, key) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollectionAndDataInCollection()) {
                    const item = this.getItemInCollectionBy(keyField, key);
                    if (item) {
                        resolve(item.value);
                    }
                }
                resolve(null);
            });
        });
    }
    initStorage(options) {
        return new Promise(resolve => {
            try {
                this.configureLokiStorage(options, this.databaseInitialize.bind(this, options, resolve));
            }
            catch {
                throw new Error(`Cannot configure Loki Storage`);
            }
        });
    }
    iterate(localforage, iteratorCallback) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollectionAndDataInCollection()) {
                    this.iterateWithDataItem(iteratorCallback);
                }
                resolve(null);
            });
        });
    }
    key(localforage, n) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    const map = this.getLokiMap();
                    resolve(map[n]);
                }
                resolve(null);
            });
        });
    }
    keys(localforage) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    const keys = [];
                    const map = this.getLokiMap();
                    for (const key of Object.keys(map)) {
                        keys.push(map[key]);
                    }
                    resolve(keys);
                }
                resolve(null);
            });
        });
    }
    length(localforage) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    resolve(this.getNumberItensInCollection());
                }
                resolve(0);
            });
        });
    }
    removeItem(localforage, key) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    this.findAndRemoveItem(key);
                }
                resolve(null);
            });
        });
    }
    setItem(localforage, key, value) {
        return new Promise(resolve => {
            localforage.ready().then(() => {
                if (this.hasCollection()) {
                    let item;
                    if (this.hasDataInCollection()) {
                        item = this.getItemInCollectionBy(keyField, key);
                    }
                    this.insertOrUpdate(item, value, key);
                }
                resolve(value);
            });
        });
    }
    // Funções de acesso ao storage
    // eslint-disable-next-line @typescript-eslint/member-ordering
    getDriver() {
        return this.driver;
    }
    addCollection(options) {
        return this.db.addCollection(options.storeName, { unique: [keyField] });
    }
    clearCollection() {
        this.collection.clear({ removeIndices: false });
    }
    configureLokiStorage(options, databaseInitialize) {
        const idbAdapter = new LokiIndexedAdapter();
        this.db = new Loki(options.name, {
            adapter: idbAdapter,
            autoload: true,
            autoloadCallback: databaseInitialize,
            autosave: true,
            autosaveInterval: 4000
        });
    }
    findAndRemoveItem(key) {
        this.collection.findAndRemove({ [keyField]: key });
    }
    getCollection(options) {
        return this.db.getCollection(options.storeName);
    }
    databaseInitialize(options, resolve) {
        this.collection = this.getCollection(options);
        if (!this.hasCollection()) {
            this.collection = this.addCollection(options);
        }
        resolve();
    }
    getItemInCollectionBy(fieldKey, key) {
        return this.collection.by(fieldKey, key);
    }
    getLokiMap() {
        return this.collection.constraints.unique[keyField].lokiMap;
    }
    hasCollection() {
        return this.collection;
    }
    hasDataInCollection() {
        return this.collection.data && this.collection.data.length;
    }
    hasCollectionAndDataInCollection() {
        return this.hasCollection() && this.hasDataInCollection();
    }
    insertOrUpdate(item, value, key) {
        if (item) {
            item.value = value;
            this.collection.update(item);
        }
        else {
            this.collection.insert({ [keyField]: key, value: value });
        }
    }
    iterateWithDataItem(iteratorcallback) {
        this.collection.data.forEach(element => {
            iteratorcallback(element.value, element[keyField], element.$loki);
        });
    }
    getNumberItensInCollection() {
        return this.collection.count();
    }
}
//# sourceMappingURL=data:application/json;base64,