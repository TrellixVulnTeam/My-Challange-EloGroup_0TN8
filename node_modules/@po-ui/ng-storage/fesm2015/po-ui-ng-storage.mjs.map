{"version":3,"file":"po-ui-ng-storage.mjs","sources":["../../../projects/storage/src/lib/drivers/lokijs/po-loki-driver.ts","../../../projects/storage/src/lib/services/po-storage.service.ts","../../../projects/storage/src/lib/po-storage.module.ts","../../../projects/storage/src/po-ui-ng-storage.ts"],"sourcesContent":["import Loki from 'lokijs';\nimport LokiIndexedAdapter from 'lokijs/src/loki-indexed-adapter';\n\nconst keyField = 'key';\n\nexport class PoLokiDriver {\n  private collection;\n  private db: any;\n  private driver: any;\n\n  constructor() {\n    const self = this;\n    this.driver = {\n      _driver: 'lokijs',\n      _initStorage: function (options: any) {\n        return self.initStorage(options);\n      },\n      clear: function () {\n        return self.clear(this);\n      },\n      getItem: function (key: any) {\n        return self.getItem(this, key);\n      },\n      iterate: function (iteratorCallback: any) {\n        return self.iterate(this, iteratorCallback);\n      },\n      key: function (n: any) {\n        return self.key(this, n);\n      },\n      keys: function () {\n        return self.keys(this);\n      },\n      length: function () {\n        return self.length(this);\n      },\n      removeItem: function (key: any) {\n        return self.removeItem(this, key);\n      },\n      setItem: function (key: any, value: any) {\n        return self.setItem(this, key, value);\n      }\n    };\n  }\n\n  // Funções de iteração\n\n  private clear(localforage: any) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollectionAndDataInCollection()) {\n          this.clearCollection();\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  private getItem(localforage: any, key: any) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollectionAndDataInCollection()) {\n          const item = this.getItemInCollectionBy(keyField, key);\n          if (item) {\n            resolve(item.value);\n          }\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  private initStorage(options: any) {\n    return new Promise(resolve => {\n      try {\n        this.configureLokiStorage(options, this.databaseInitialize.bind(this, options, resolve));\n      } catch {\n        throw new Error(`Cannot configure Loki Storage`);\n      }\n    });\n  }\n\n  private iterate(localforage: any, iteratorCallback: Function) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollectionAndDataInCollection()) {\n          this.iterateWithDataItem(iteratorCallback);\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  private key(localforage: any, n: string | number) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollection()) {\n          const map = this.getLokiMap();\n          resolve(map[n]);\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  private keys(localforage: any) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollection()) {\n          const keys = [];\n          const map = this.getLokiMap();\n          for (const key of Object.keys(map)) {\n            keys.push(map[key]);\n          }\n          resolve(keys);\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  private length(localforage: any) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollection()) {\n          resolve(this.getNumberItensInCollection());\n        }\n        resolve(0);\n      });\n    });\n  }\n\n  private removeItem(localforage: any, key: any) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollection()) {\n          this.findAndRemoveItem(key);\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  private setItem(localforage: any, key: any, value: any) {\n    return new Promise(resolve => {\n      localforage.ready().then(() => {\n        if (this.hasCollection()) {\n          let item: any;\n          if (this.hasDataInCollection()) {\n            item = this.getItemInCollectionBy(keyField, key);\n          }\n          this.insertOrUpdate(item, value, key);\n        }\n        resolve(value);\n      });\n    });\n  }\n\n  // Funções de acesso ao storage\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  getDriver() {\n    return this.driver;\n  }\n\n  private addCollection(options: any): any {\n    return this.db.addCollection(options.storeName, { unique: [keyField] });\n  }\n\n  private clearCollection() {\n    this.collection.clear({ removeIndices: false });\n  }\n\n  private configureLokiStorage(options: any, databaseInitialize: any) {\n    const idbAdapter = new LokiIndexedAdapter();\n    this.db = new Loki(options.name, {\n      adapter: idbAdapter,\n      autoload: true,\n      autoloadCallback: databaseInitialize,\n      autosave: true,\n      autosaveInterval: 4000\n    });\n  }\n\n  private findAndRemoveItem(key: any) {\n    this.collection.findAndRemove({ [keyField]: key });\n  }\n\n  private getCollection(options: any): any {\n    return this.db.getCollection(options.storeName);\n  }\n\n  private databaseInitialize(options: any, resolve: Function) {\n    this.collection = this.getCollection(options);\n    if (!this.hasCollection()) {\n      this.collection = this.addCollection(options);\n    }\n    resolve();\n  }\n\n  private getItemInCollectionBy(fieldKey: string, key: any) {\n    return this.collection.by(fieldKey, key);\n  }\n\n  private getLokiMap() {\n    return this.collection.constraints.unique[keyField].lokiMap;\n  }\n\n  private hasCollection() {\n    return this.collection;\n  }\n\n  private hasDataInCollection() {\n    return this.collection.data && this.collection.data.length;\n  }\n\n  private hasCollectionAndDataInCollection() {\n    return this.hasCollection() && this.hasDataInCollection();\n  }\n\n  private insertOrUpdate(item: any, value: any, key: any) {\n    if (item) {\n      item.value = value;\n      this.collection.update(item);\n    } else {\n      this.collection.insert({ [keyField]: key, value: value });\n    }\n  }\n\n  private iterateWithDataItem(iteratorcallback: Function) {\n    this.collection.data.forEach(element => {\n      iteratorcallback(element.value, element[keyField], element.$loki);\n    });\n  }\n\n  private getNumberItensInCollection(): number {\n    return this.collection.count();\n  }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport * as LocalForage from 'localforage';\nimport 'localforage';\n\nimport IdleQueue from 'custom-idle-queue';\n\nimport { PoLokiDriver } from '../drivers/lokijs/po-loki-driver';\nimport { PoStorageConfig } from './po-storage-config.interface';\n\nexport const PO_STORAGE_CONFIG_TOKEN = new InjectionToken('PO_STORAGE_CONFIG_TOKEN');\n\n/**\n * @description\n *\n * O PO Storage é uma biblioteca que fornece um serviço para armazenamento de dados no dispositivo local, sendo semelhante\n * ao funcionamento do [IonicStorage](https://ionicframework.com/docs/storage/).\n * É possível utilizar os drivers [Websql](https://dev.w3.org/html5/webdatabase/), [Indexeddb](https://www.w3.org/TR/IndexedDB/),\n * [LocalStorage](https://html.spec.whatwg.org/multipage/webstorage.html) e também [LokiJS](https://github.com/techfort/LokiJS/wiki).\n *\n * Para um melhor ganho de performance ao buscar e salvar dados, recomendamos a utilização do `LokiJS`, um *database*\n * orientado a documento semelhante ao MongoDB, que além de permitir a persistência dos dados no dispositivo possibilita\n * também o armazenamento dos dados em memória. Outra vantagem, é o aumento do limite de armazenamento para\n * aproximadamente `300mb`.\n *\n * A estrutura utilizada para armazenar os dados é a de chave/valor, onde uma chave funciona como um identificador exclusivo.\n *\n * #### Instalando o PO Storage\n *\n * Para instalar o `po-storage` em sua aplicação execute o seguinte comando:\n *\n * ```shell\n * ng add @po-ui/ng-storage\n * ```\n * Será instalado o pacote `@po-ui/ng-storage` e também já importará `PoStorageModule` no módulo principal da sua aplicação, conforme abaixo:\n *\n * ```typescript\n * import { PoStorageModule } from '@po-ui/ng-storage';\n *\n * @NgModule({\n *  declarations: [...],\n *  imports: [\n *    // Importação do módulo PoStorageModule\n *    PoStorageModule.forRoot(),\n *  ],\n *  bootstrap: [IonicApp],\n *  providers: [...]\n * })\n * export class AppModule {}\n * ```\n *\n * Com a declaração do módulo, é criada uma base de dados no armazenamento local e o serviço `PoStorageService` estará\n * pronto para ser utilizada na sua aplicação.\n *\n * #### Configurando as opções de armazenamento\n *\n * Na importação do módulo, o método `PoStorageModule.forRoot()` pode receber como parâmetro um objeto do tipo\n * [`PoStorageConfig`](documentation/po-storage#po-storage-config),\n * que serve para configurar as opções personalizadas do armazenamento, como por exemplo: o tipo de armazenamento\n * preferêncial.\n *\n * Caso não seja passada nenhuma configuração a ordem padrão será: ['websql', 'indexeddb', 'localstorage', 'lokijs'].\n *\n * Abaixo segue um exemplo de configuração onde o storage preferencial passa a ser o `lokijs`:\n *\n * ```typescript\n * import { PoStorageModule } from '@po-ui/ng-storage';\n *\n * @NgModule({\n *  declarations: [...],\n *  imports: [\n *    // Importação do módulo PoStorageModule com a configuração personalizada\n *    PoStorageModule.forRoot({\n *      name: 'mystorage',\n *      storeName: '_mystore',\n *      driverOrder: ['lokijs', 'websql', 'indexeddb', 'localstorage']\n *    }),\n *  ],\n *  bootstrap: [IonicApp],\n *  providers: [...]\n * })\n * export class AppModule {}\n * ```\n */\n@Injectable()\nexport class PoStorageService {\n  private driver: string = null;\n  private idleQueue = new IdleQueue();\n  private storagePromise: Promise<LocalForage>;\n  private lokijsDriver: PoLokiDriver;\n\n  constructor(@Inject(PO_STORAGE_CONFIG_TOKEN) config?: PoStorageConfig) {\n    this.lokijsDriver = new PoLokiDriver();\n    this.setStoragePromise(config);\n  }\n\n  /**\n   * Retorna a configuração padrão para o armazenamento. Caso nenhuma configuração seja inserida,\n   * essa configuração será utilizada.\n   *\n   * @returns {PoStorageConfig} Objeto com a configuração padrão do armazenamento.\n   */\n  static getDefaultConfig(): PoStorageConfig {\n    return {\n      name: '_postorage',\n      storeName: '_pokv',\n      driverOrder: ['websql', 'indexeddb', 'localstorage', 'lokijs']\n    };\n  }\n\n  /**\n   * Cria uma instância do `PoStorageService` com a configuração de armazenamento passada como parâmetro.\n   *\n   * @param {PoStorageConfig} storageConfig Configuração para o armazenamento.\n   * @returns {PoStorageService} Instância do `PoStorageService`.\n   */\n  static providePoStorage(storageConfig?: PoStorageConfig): PoStorageService {\n    return new PoStorageService(PoStorageService.getConfig(storageConfig));\n  }\n\n  private static getConfig(storageConfig?: PoStorageConfig) {\n    return storageConfig || PoStorageService.getDefaultConfig();\n  }\n\n  /**\n   * Busca uma lista armazenada pela chave e concatena com a lista passada por parâmetro.\n   *\n   * Por exemplo:\n   *\n   * ``` typescript\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\n   *\n   * this.poStorageService.set('clientKey', clients).then(() => {});\n   *\n   * ...\n   *\n   * const newClients = [ { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 } ];\n   *\n   * this.poStorageService.appendArrayToArray('clientKey', newClients).then(() => {\n   *   // A lista agora será:\n   *   // [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }, { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 }];\n   * });\n   * ```\n   *\n   * @param {string} key Chave da lista armazenada.\n   * @param {Array} value Lista que será concatenada.\n   *\n   * @returns {Promise<any>} Promessa que é resolvida após as duas listas serem concatenadas e armazenadas localmente.\n   */\n  async appendArrayToArray(key: string, value: Array<any>): Promise<any> {\n    const data = await this.getArrayOfStorage(key);\n\n    const newData = [...data, ...value];\n    return this.set(key, newData);\n  }\n\n  /**\n   * Acrescenta um item em uma lista armazenada pela chave.\n   *\n   * @param {string} key Chave da lista armazenada.\n   * @param {Array} value Item que será acrescentado na lista.\n   *\n   * @returns {Promise<any>} Promessa que é resolvida após o item ser acrescentado na lista armazenada.\n   */\n  async appendItemToArray(key: string, value: any): Promise<any> {\n    const data = await this.getArrayOfStorage(key);\n\n    data.push(value);\n    return this.set(key, data);\n  }\n\n  /**\n   * Remove todos os itens da base de dados local configurada na declaração do módulo `PoStorageModule`.\n   *\n   * > Utilize este método com cautela, para evitar a perda indesejada de dados.\n   *\n   * @returns {Promise<void>} Promessa que é resolvida após todos os itens da base de dados local serem removidos.\n   */\n  clear(): Promise<void> {\n    return this.storagePromise.then(store => store.clear());\n  }\n\n  /**\n   * Verifica se existe um valor dentro de uma determinada chave.\n   *\n   * @param {string} key Chave que será verificada.\n   *\n   * @returns {Promise<boolean>} Promessa que é resolvida quando a verificação da existência do valor na chave é concluída.\n   */\n  exists(key: string): Promise<boolean> {\n    return this.get(key).then(data => Promise.resolve(data !== null));\n  }\n\n  /**\n   * Itera sobre todas as chaves armazenadas.\n   *\n   * @param {any} iteratorCallback Função de `callback` que é chamada a cada iteração, com os seguintes parâmetros:\n   * valor, chave e número da iteração.\n   *\n   * Exemplo de utilização:\n   *\n   * ``` typescript\n   * this.poStorageService.forEach((value: any, key: string, iterationNumber: number) => {\n   *   // Iteração sobre cada chave armazenada.\n   * });\n   * ```\n   *\n   * @returns {Promise<void>} Promessa que é resolvida após a iteração sobre todas as chaves armazenadas.\n   */\n  forEach(iteratorCallback: (value: any, key: string, iterationNumber: number) => any): Promise<void> {\n    return this.storagePromise.then(store => store.iterate(iteratorCallback));\n  }\n\n  /**\n   * Retorna o valor armazenado em uma determinada chave.\n   *\n   * @param {string} key Chave que identifica o item.\n   * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\n   * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\n   *\n   * Padrão: `false`.\n   *\n   * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\n   * @returns {Promise<any>} Promessa que é resolvida após o item ser buscado.\n   */\n  async get(key: string, lock: boolean = false): Promise<any> {\n    if (lock) {\n      await this.requestIdlePromise();\n      return await this.idleQueue.wrapCall(async () => {\n        await this.getImmutableItem(key);\n      });\n    }\n    return await this.getImmutableItem(key);\n  }\n\n  /**\n   * Retorna o nome do *driver* que está sendo usado para armazenar os dados, por exemplo: localStorage.\n   *\n   * @returns {string | null} Nome do *driver*.\n   */\n  getDriver(): string {\n    return this.driver;\n  }\n\n  /**\n   * Retorna o primeiro item de uma lista para uma determinada chave.\n   *\n   * @param {string} key Chave da lista.\n   * @returns {Promise<any>} Promessa que é resolvida após o primeiro item ser encontrado.\n   */\n  getFirstItem(key: string): Promise<any> {\n    return this.get(key).then((data: Array<any>) => Promise.resolve(data ? data[0] : null));\n  }\n\n  /**\n   * Remove o primeiro item de uma lista a partir da chave.\n   *\n   * @param {string} key Chave da lista que será removido o primeiro item.\n   * @returns {Promise<any>} Promessa que é resolvida após o primeiro item da lista ser removido.\n   */\n  getItemAndRemove(key: string): Promise<any> {\n    return this.get(key).then((data: Array<any>) => {\n      if (data === null) {\n        return null;\n      }\n\n      const item = data.shift();\n      return this.set(key, data).then(() => Promise.resolve(item));\n    });\n  }\n\n  /**\n   * Busca o primeiro objeto encontrado dentro de uma lista pelo do valor de um campo.\n   *\n   * Por exemplo:\n   *\n   * ``` typescript\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\n   *\n   * this.poStorageService.set('clientKey', clients).then(() => {});\n   *\n   * ...\n   *\n   * this.poStorageService.getItemByField('clientKey', 'name', 'Marie').then(client => {\n   *   // Resultado do console.log: { name: 'Marie', age: 23 }\n   *   console.log(client);\n   * });\n   * ```\n   *\n   * @param {string} key Chave da lista.\n   * @param {string} fieldName O campo a ser filtrado.\n   * @param {any} fieldValue O valor do campo.\n   * @returns {Promise<any>} Promessa que é resolvida com o item que foi encontrado.\n   */\n  getItemByField(key: string, fieldName: string, fieldValue: any): Promise<any> {\n    return this.get(key).then((storageRecords: Array<any>) => {\n      let storageRecordsFiltered = storageRecords.find(storageRecord => storageRecord[fieldName] === fieldValue);\n      storageRecordsFiltered = storageRecordsFiltered || null;\n\n      return Promise.resolve(storageRecordsFiltered);\n    });\n  }\n\n  /**\n   * Lista com todas as chaves armazenadas.\n   *\n   * @returns {Promise<Array<string>>} Promessa que é resolvida com todas as chaves armazenadas.\n   */\n  keys(): Promise<Array<string>> {\n    return this.storagePromise.then(store => store.keys());\n  }\n\n  /**\n   * Quantidade de chaves armazenadas.\n   *\n   * @returns {Promise<number>} Promessa que é resolvida com o número de chaves armazenadas.\n   */\n  length(): Promise<number> {\n    return this.storagePromise.then(store => store.length());\n  }\n\n  /**\n   * Utilizado para gerenciar o bloqueio e desbloqueio de recursos no `PoStorageService`.\n   * Aguardando a liberação da utilização dos recursos que participam deste comportamento e posteriormente envolve o recurso\n   * passado como parâmetro em um comportamento de bloqueio e desbloqueio.\n   *\n   * Este método se comporta igual a utilização em conjunta dos métodos: `PoStorageService.requestIdlePromise()`,\n   * `PoStorageService.lock()` e `PoStorageService.unlook()`.\n   *\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\n   *\n   * @param {Function} limitedResource Função que será envolvida no comportamento de bloqueio e desbloqueio.\n   */\n  async limitedCallWrap(limitedResource: Function): Promise<any> {\n    await this.requestIdlePromise();\n    return this.idleQueue.wrapCall(limitedResource);\n  }\n\n  /**\n   * Incrementa um valor na fila de bloqueio do `PoStorageService`. Utilizado juntamente com o método `unlock` para poder\n   * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\n   *\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\n   */\n  lock() {\n    this.idleQueue.lock();\n  }\n\n  /**\n   * Determina se o processo de inicialização do *driver* assíncrono foi concluído.\n   *\n   * @returns {Promise<LocalForage>} Promessa que é resolvida quando o processo de inicialização do *driver* assíncrono\n   * for concluído.\n   */\n  ready(): Promise<LocalForage> {\n    return this.storagePromise;\n  }\n\n  /**\n   * Remove um valor associado a uma chave.\n   *\n   * @param {key} key Chave do valor que será removido.\n   * @returns {Promise<any>} Promessa que é resolvida após o valor ser removido.\n   */\n  remove(key: string): Promise<any> {\n    return this.storagePromise.then(store => store.removeItem(key));\n  }\n\n  /**\n   * Remove uma propriedade de um objeto armazenado.\n   *\n   * @param {string} key Chave do objeto armazenado.\n   * @param {string} property Propriedade que será removida.\n   *\n   * @returns {Promise<any>} Promessa que é resolvida após a propriedade ser removida.\n   */\n  async removeIndexFromObject(key: string, property: string): Promise<any> {\n    const data = await this.getObjectOfStorage(key);\n\n    delete data[property];\n    return this.set(key, data);\n  }\n\n  /**\n   * Remove um objeto de uma lista armazenada pelo valor de uma propriedade.\n   *\n   * Por exemplo:\n   *\n   * ``` typescript\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\n   *\n   * this.poStorageService.set('clientKey', clients).then(() => {});\n   *\n   * ...\n   *\n   * this.poStorageService.removeItemFromArray('clientKey', 'name', 'Marie').then(() => {\n   *   // O objeto { name: 'Marie', age: 23 } foi removido da lista que está na chave 'clientKey'\n   * });\n   * ```\n   *\n   * @param {string} key Chave da lista que contém o item que será removido.\n   * @param {string} field O campo a ser filtrado no item.\n   * @param {string} value O valor do filtro.\n   * @returns {Promise<any>} Promessa que é resolvida quando o objeto for removido da lista.\n   */\n  async removeItemFromArray(key: string, field: string, value: any): Promise<any> {\n    let data = await this.getArrayOfStorage(key);\n\n    data = data.filter(item => item[field] !== value);\n    return this.set(key, data);\n  }\n\n  /**\n   * <a id=\"request-idle-promise\"></a>\n   * Método que verifica se o acesso a base de dados configurada está liberado.\n   *\n   * Utilizado em conjunto com os métodos `lock()` e `unlock()` entre tarefas que não podem ser executadas de forma\n   * paralela, para não causar inconsistências nos dados.\n   *\n   * Exemplo de utilização:\n   *\n   * ```\n   * // Aguarda a liberação para continuar\n   * await this.poStorage.requestIdlePromise();\n   *\n   * this.poStorage.lock();\n   *\n   * // Executa uma tarefa que irá ler e/ou escrever na base de dados configurada.\n   *\n   * this.poStorage.unlock();\n   * ```\n   *\n   * > É importante sempre utilizá-lo antes de executar os métodos `lock()` e `unlock()` para garantir que a tarefa só\n   * será executada caso o acesso esteja livre.\n   *\n   * @returns {Promise<any>} Promessa que é resolvida quando o acesso a base de dados configurada estiver liberado.\n   */\n  requestIdlePromise(): Promise<any> {\n    return this.idleQueue.requestIdlePromise();\n  }\n\n  /**\n   * Grava um valor em uma determinada chave.\n   *\n   * @param {string} key Chave para o valor que será gravado.\n   * @param {any} value Valor que será gravado.\n   * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\n   * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\n   *\n   * Padrão: `false`.\n   *\n   * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\n   * @returns {Promise<any>} Promessa que é resolvida após o valor ter sido gravado.\n   */\n  async set(key: string, value: any, lock: boolean = false): Promise<any> {\n    const store = await this.storagePromise;\n    const newValue = typeof value === 'object' ? JSON.parse(JSON.stringify(value)) : value;\n\n    if (lock) {\n      await this.requestIdlePromise();\n      return this.idleQueue.wrapCall(() => store.setItem(key, newValue));\n    }\n\n    return store.setItem(key, newValue);\n  }\n\n  /**\n   * Atribui um valor a uma propriedade de um objeto armazenado pela chave.\n   *\n   * Por exemplo:\n   *\n   * ``` typescript\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\n   *\n   * this.poStorageService.set('clientKey', clients).then(() => {});\n   *\n   * ...\n   *\n   * this.poStorageService.setIndexToObject('clientKey', 'name', 'Clare').then(() => {\n   *   // O objeto { name: 'Marie', age: 23 } passa a ser { name: 'Clare', age: 23 }\n   * });\n   * ```\n   *\n   * @param {string} key Chave do objeto.\n   * @param {string} property Nome da propriedade do objeto.\n   * @param {any} value Valor que será gravado na propriedade do objeto.\n   */\n  async setIndexToObject(key: string, property: string, value: any): Promise<any> {\n    const data = await this.getObjectOfStorage(key);\n\n    data[property] = value;\n    return this.set(key, data);\n  }\n\n  /**\n   * Decrementa um valor na fila de bloqueio. Utilizado juntamente com o método `lock` para poder\n   * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\n   *\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\n   */\n  unlock() {\n    this.idleQueue.unlock();\n  }\n\n  private async getArrayOfStorage(key: string) {\n    const data = await this.get(key);\n    return data || [];\n  }\n\n  private async getImmutableItem(key: string) {\n    const store = await this.storagePromise;\n    const items = await store.getItem(key);\n    return items ? JSON.parse(JSON.stringify(items)) : null;\n  }\n\n  private async defineLocalForageDriver(localForageInstance: any, driverOrder) {\n    await localForageInstance.defineDriver(this.lokijsDriver.getDriver());\n    await this.setDriver(localForageInstance, driverOrder);\n    return localForageInstance;\n  }\n\n  private getDriverOrder(driverOrder: Array<string>): Array<string> {\n    return driverOrder.map(driver => {\n      switch (driver) {\n        case 'indexeddb':\n          return LocalForage.INDEXEDDB;\n        case 'websql':\n          return LocalForage.WEBSQL;\n        case 'localstorage':\n          return LocalForage.LOCALSTORAGE;\n        default:\n          return driver;\n      }\n    });\n  }\n\n  private async getObjectOfStorage(key: string) {\n    const data = await this.get(key);\n    return data || {};\n  }\n\n  private async setDriver(localForageInstance: LocalForage, driverOrder) {\n    await localForageInstance.setDriver(this.getDriverOrder(driverOrder));\n    this.driver = localForageInstance.driver();\n  }\n\n  private setStoragePromise(config: PoStorageConfig) {\n    this.storagePromise = this.getStorageInstance(config);\n  }\n\n  private async getStorageInstance(config: PoStorageConfig) {\n    const defaultConfig = PoStorageService.getDefaultConfig();\n    const actualConfig = Object.assign(defaultConfig, config || {});\n\n    const localForageInstance = LocalForage.createInstance(actualConfig);\n\n    try {\n      return await this.defineLocalForageDriver(localForageInstance, actualConfig.driverOrder);\n    } catch {\n      throw new Error(`Cannot use this drivers: ${actualConfig.driverOrder.join(', ')}.`);\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { PoStorageConfig } from './services/po-storage-config.interface';\nimport { PoStorageService, PO_STORAGE_CONFIG_TOKEN } from './services/po-storage.service';\n\n/**\n * @description\n *\n * Módulo do componente PoStorage responsável por manipular o storage do browser.\n */\n\n@NgModule()\nexport class PoStorageModule {\n  static forRoot(storageConfig?: PoStorageConfig): ModuleWithProviders<PoStorageModule> {\n    return {\n      ngModule: PoStorageModule,\n      providers: [\n        {\n          provide: PO_STORAGE_CONFIG_TOKEN,\n          useValue: storageConfig || PoStorageService.getDefaultConfig()\n        },\n        {\n          provide: PoStorageService,\n          useFactory: PoStorageService.providePoStorage,\n          deps: [PO_STORAGE_CONFIG_TOKEN]\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}