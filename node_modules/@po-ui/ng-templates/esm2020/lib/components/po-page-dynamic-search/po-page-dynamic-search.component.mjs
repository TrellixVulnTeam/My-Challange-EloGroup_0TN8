import { Component, ViewChild } from '@angular/core';
import { PoDynamicFieldType } from '@po-ui/ng-components';
import { capitalizeFirstLetter, getBrowserLanguage } from '../../utils/util';
import { PoAdvancedFilterComponent } from './po-advanced-filter/po-advanced-filter.component';
import { PoPageDynamicSearchBaseComponent } from './po-page-dynamic-search-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@po-ui/ng-components";
import * as i2 from "../../services/po-page-customization/po-page-customization.service";
import * as i3 from "./po-advanced-filter/po-advanced-filter.component";
const _c0 = ["*"];
/**
 * @docsExtends PoPageDynamicSearchBaseComponent
 *
 * @example
 *
 * <example name="po-page-dynamic-search-basic" title="PO Page Dynamic Search Basic">
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-search-hiring-processes" title="PO Page Dynamic Search - Hiring processes">
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
export class PoPageDynamicSearchComponent extends PoPageDynamicSearchBaseComponent {
    constructor(languageService, poPageCustomizationService, changeDetector) {
        super(languageService);
        this.poPageCustomizationService = poPageCustomizationService;
        this.changeDetector = changeDetector;
        this._disclaimerGroup = {
            remove: this.onRemoveDisclaimer.bind(this),
            removeAll: this.onRemoveAllDisclaimers.bind(this),
            disclaimers: [],
            title: this.literals.disclaimerGroupTitle
        };
        this._filterSettings = {
            action: this.onAction.bind(this),
            advancedAction: this.onAdvancedAction.bind(this),
            placeholder: this.literals.searchPlaceholder,
            width: this.quickSearchWidth
        };
    }
    get disclaimerGroup() {
        return Object.assign({}, this._disclaimerGroup, { title: this.literals.disclaimerGroupTitle });
    }
    get filterSettings() {
        this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : this.onAdvancedAction.bind(this);
        return Object.assign({}, this._filterSettings, {
            placeholder: this.literals.searchPlaceholder,
            width: this.quickSearchWidth
        });
    }
    ngOnInit() {
        this.setAdvancedFilterLiterals(this.literals);
        if (this.onLoad) {
            this.loadOptionsOnInitialize(this.onLoad);
        }
    }
    ngOnDestroy() {
        if (this.loadSubscription) {
            this.loadSubscription.unsubscribe();
        }
    }
    onChangeFilters(filters) {
        const filterObjectWithValue = filters
            .filter(filter => filter.initValue)
            .reduce((prev, current) => ({ ...prev, ...{ [current.property]: current.initValue } }), {});
        if (Object.keys(filterObjectWithValue).length) {
            this.onAdvancedSearch({ filter: filterObjectWithValue });
        }
    }
    onAction(quickFilter) {
        const disclaimerQuickSearchUpdated = {
            property: 'search',
            label: `${this.literals.quickSearchLabel} ${quickFilter}`,
            value: quickFilter
        };
        const getDisclaimersWithConcatFilters = () => [
            ...this.getDisclaimersWithoutQuickSearch(),
            disclaimerQuickSearchUpdated
        ];
        this._disclaimerGroup.disclaimers = this.concatFilters
            ? getDisclaimersWithConcatFilters()
            : [disclaimerQuickSearchUpdated];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(quickFilter);
        }
        if (this.keepFilters && !this.concatFilters) {
            this.filters.forEach(element => delete element.initValue);
        }
        this.changeDetector.detectChanges();
    }
    onAdvancedAction() {
        this.poAdvancedFilter.open();
    }
    onAdvancedSearch(filteredItems) {
        const { filter, optionsService } = filteredItems;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filter, optionsService);
        this.setFilters(filter);
        this.advancedSearch.emit(filter);
    }
    getDisclaimersWithoutQuickSearch() {
        const quickSearchProperty = 'search';
        return this._disclaimerGroup.disclaimers.filter(item => item.property !== quickSearchProperty);
    }
    setFilters(filters) {
        const formattedFilters = this.convertToFilters(filters);
        this.filters.forEach(element => {
            const compatibleObject = formattedFilters.find(item => item.property === element.property);
            if (compatibleObject) {
                element.initValue = compatibleObject.value;
            }
            else {
                delete element.initValue;
            }
        });
    }
    convertToFilters(filters) {
        return Object.entries(filters).map(([property, value]) => ({ property, value }));
    }
    optionsServiceDisclaimerLabel(value, optionsServiceObjectsList) {
        const optionServiceMatch = optionsServiceObjectsList.find(option => option.value === value);
        return optionServiceMatch.label || optionServiceMatch.value;
    }
    applyDisclaimerLabelValue(field, filterValue) {
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        const labels = values.map(value => {
            const filteredField = field.options.find(option => option.value === value || option === value);
            if (filteredField) {
                return filteredField.label || filteredField.value || filteredField;
            }
        });
        return labels.join(', ');
    }
    formatDate(date) {
        const year = parseInt(date.substr(0, 4), 10);
        const month = parseInt(date.substr(5, 2), 10);
        const day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    }
    formatArrayToObjectKeyValue(filters) {
        const formattedObject = filters.reduce((result, item) => Object.assign(result, { [item.property]: item.value || item.initValue }), {});
        Object.keys(formattedObject).forEach(key => {
            if (!formattedObject[key]) {
                delete formattedObject[key];
            }
        });
        return formattedObject;
    }
    getFieldByProperty(fields, fieldName) {
        return fields.find((field) => field.property === fieldName);
    }
    getFilterValueToDisclaimer(field, value, optionsServiceObjectsList) {
        if (field.optionsService && optionsServiceObjectsList) {
            return this.optionsServiceDisclaimerLabel(value, optionsServiceObjectsList);
        }
        if (field.type === PoDynamicFieldType.Date) {
            return field.range ? this.formatDate(value.start) + ' - ' + this.formatDate(value.end) : this.formatDate(value);
        }
        if (field.options && value) {
            return this.applyDisclaimerLabelValue(field, value);
        }
        return value;
    }
    onRemoveDisclaimer(removeData) {
        const { currentDisclaimers } = removeData;
        this.emitChangesDisclaimers(currentDisclaimers);
    }
    emitChangesDisclaimers(currentDisclaimers) {
        this.changeDisclaimers.emit(currentDisclaimers);
        this.setFilters(this.formatArrayToObjectKeyValue(currentDisclaimers));
    }
    onRemoveAllDisclaimers() {
        this.emitChangesDisclaimers([]);
    }
    setDisclaimers(filters, optionsServiceObjects) {
        const disclaimers = [];
        const properties = Object.keys(filters);
        properties.forEach(property => {
            const field = this.getFieldByProperty(this.filters, property);
            const label = field.label || capitalizeFirstLetter(field.property);
            const value = filters[property];
            const valueDisplayedOnTheDisclaimerLabel = this.getFilterValueToDisclaimer(field, value, optionsServiceObjects);
            if (valueDisplayedOnTheDisclaimerLabel !== '') {
                disclaimers.push({
                    label: `${label}: ${valueDisplayedOnTheDisclaimerLabel}`,
                    property,
                    value
                });
            }
        });
        return disclaimers;
    }
    loadOptionsOnInitialize(onLoad) {
        this.loadSubscription = this.getPoDynamicPageOptions(onLoad).subscribe(responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption));
    }
    getPoDynamicPageOptions(onLoad) {
        const originalOption = {
            title: this.title,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            filters: this.filters,
            keepFilters: this.keepFilters,
            concatFilters: this.concatFilters,
            quickSearchWidth: this.quickSearchWidth
        };
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'filters',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true,
                    keyForMerge: 'label'
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                },
                {
                    nameProp: 'keepFilters'
                },
                {
                    nameProp: 'concatFilters'
                },
                {
                    nameProp: 'quickSearchWidth'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicSearchComponent.ɵfac = function PoPageDynamicSearchComponent_Factory(t) { return new (t || PoPageDynamicSearchComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i2.PoPageCustomizationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoPageDynamicSearchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageDynamicSearchComponent, selectors: [["po-page-dynamic-search"]], viewQuery: function PoPageDynamicSearchComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoAdvancedFilterComponent, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poAdvancedFilter = _t.first);
    } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 3, vars: 8, consts: [[3, "p-actions", "p-breadcrumb", "p-disclaimer-group", "p-filter", "p-title"], [3, "p-filters", "p-keep-filters", "p-literals", "p-search-event"]], template: function PoPageDynamicSearchComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "po-page-list", 0)(1, "po-advanced-filter", 1);
        i0.ɵɵlistener("p-search-event", function PoPageDynamicSearchComponent_Template_po_advanced_filter_p_search_event_1_listener($event) { return ctx.onAdvancedSearch($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵprojection(2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-actions", ctx.actions)("p-breadcrumb", ctx.breadcrumb)("p-disclaimer-group", ctx.disclaimerGroup)("p-filter", ctx.filterSettings)("p-title", ctx.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-filters", ctx.filters)("p-keep-filters", ctx.keepFilters)("p-literals", ctx.advancedFilterLiterals);
    } }, directives: [i1.PoPageListComponent, i3.PoAdvancedFilterComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicSearchComponent, [{
        type: Component,
        args: [{ selector: 'po-page-dynamic-search', template: "<po-page-list\n  [p-actions]=\"actions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-disclaimer-group]=\"disclaimerGroup\"\n  [p-filter]=\"filterSettings\"\n  [p-title]=\"title\"\n>\n  <po-advanced-filter\n    [p-filters]=\"filters\"\n    [p-keep-filters]=\"keepFilters\"\n    [p-literals]=\"advancedFilterLiterals\"\n    (p-search-event)=\"onAdvancedSearch($event)\"\n  >\n  </po-advanced-filter>\n\n  <ng-content></ng-content>\n</po-page-list>\n" }]
    }], function () { return [{ type: i1.PoLanguageService }, { type: i2.PoPageCustomizationService }, { type: i0.ChangeDetectorRef }]; }, { poAdvancedFilter: [{
            type: ViewChild,
            args: [PoAdvancedFilterComponent, { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,