import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import * as i0 from "@angular/core";
export class PoPageDynamicListBaseComponent {
    constructor() {
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        this._autoRouter = false;
        this._columns = [];
        this._duplicates = [];
        this._fields = [];
        this._filters = [];
        this._keys = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `p-actions`
     *
     * As rotas criadas serão baseadas na propriedade `p-actions`.
     *
     * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
     *
     * @default false
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos campos usados na tabela e busca avançada.
     *
     *
     * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
        this.setFieldsProperties(this.fields);
    }
    get fields() {
        return this._fields;
    }
    set columns(value) {
        this._columns = [...value];
    }
    get columns() {
        return this._columns;
    }
    set duplicates(value) {
        this._duplicates = [...value];
    }
    get duplicates() {
        return this._duplicates;
    }
    set filters(value) {
        this._filters = [...value];
    }
    get filters() {
        return this._filters;
    }
    set keys(value) {
        this._keys = [...value];
    }
    get keys() {
        return this._keys;
    }
    setFieldsProperties(fields) {
        this.filters = fields
            .filter(field => field.filter === true)
            .map(filterField => ({ ...filterField, visible: true }));
        this.columns = fields.filter(field => field.visible === undefined || field.visible === true || field.allowColumnsManager === true);
        this.keys = fields.filter(field => field.key === true).map(field => field.property);
        this.duplicates = fields.filter(field => field.duplicate === true).map(field => field.property);
    }
}
PoPageDynamicListBaseComponent.ɵfac = function PoPageDynamicListBaseComponent_Factory(t) { return new (t || PoPageDynamicListBaseComponent)(); };
PoPageDynamicListBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDynamicListBaseComponent, inputs: { breadcrumb: ["p-breadcrumb", "breadcrumb"], serviceApi: ["p-service-api", "serviceApi"], title: ["p-title", "title"], autoRouter: ["p-auto-router", "autoRouter"], fields: ["p-fields", "fields"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicListBaseComponent, [{
        type: Directive
    }], null, { breadcrumb: [{
            type: Input,
            args: ['p-breadcrumb']
        }], serviceApi: [{
            type: Input,
            args: ['p-service-api']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], autoRouter: [{
            type: Input,
            args: ['p-auto-router']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,